version: '3.8'
services:
  discord:
    build:
      context: '.'
      dockerfile: 'services/discord/Dockerfile'
      args:
        BUILDKIT_INLINE_CACHE: '1'
    image: 'discord-voice-bot:latest'
    ports:
      - '8009:8001'
    env_file:
      - './.env.common'
      - './.env.docker'
      - './services/discord/.env.service'
    volumes:
      - './debug:/app/debug'
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; import sys; try: response = httpx.get('http://localhost:8001/health/ready', timeout=5.0); sys.exit(0 if response.status_code == 200 else 1) except Exception: sys.exit(1)"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 45s
    depends_on:
      stt:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    restart: 'unless-stopped'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'

  stt:
    build:
      context: '.'
      dockerfile: 'services/stt/Dockerfile'
      args:
        BUILDKIT_INLINE_CACHE: '1'
    image: 'discord-voice-stt:latest'
    ports:
      - '8011:9000'
    env_file:
      - './.env.common'
      - './.env.docker'
      - './services/stt/.env.service'
    volumes:
      - './services/models/stt:/app/models:ro'
      - './debug:/app/debug'
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; import sys; try: response = httpx.get('http://localhost:9000/health/ready', timeout=5.0); sys.exit(0 if response.status_code == 200 else 1) except Exception: sys.exit(1)"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: 'unless-stopped'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'

  llm:
    build:
      context: '.'
      dockerfile: 'services/llm/Dockerfile'
      args:
        BUILDKIT_INLINE_CACHE: '1'
    image: 'discord-voice-llm:latest'
    env_file:
      - './.env.common'
      - './.env.docker'
      - './services/llm/.env.service'
    ports:
      - '8017:8000'
    volumes:
      - './services/models/llm:/app/models:ro'
      - './debug:/app/debug'
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; import sys; try: response = httpx.get('http://localhost:8000/health/ready', timeout=5.0); sys.exit(0 if response.status_code == 200 else 1) except Exception: sys.exit(1)"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: 'unless-stopped'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'

  orchestrator:
    build:
      context: '.'
      dockerfile: 'services/orchestrator/Dockerfile'
      args:
        BUILDKIT_INLINE_CACHE: '1'
    image: 'discord-voice-orchestrator:latest'
    env_file:
      - './.env.common'
      - './.env.docker'
      - './services/orchestrator/.env.service'
    ports:
      - '8023:8000'
    volumes:
      - './mcp.json:/app/mcp.json:ro'
      - './services/discord:/app/services/discord:ro'
      - './debug:/app/debug'
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; import sys; try: response = httpx.get('http://localhost:8000/health/ready', timeout=5.0); sys.exit(0 if response.status_code == 200 else 1) except Exception: sys.exit(1)"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      llm:
        condition: service_healthy
      tts:
        condition: service_healthy
    restart: 'unless-stopped'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'

  tts:
    build:
      context: '.'
      dockerfile: 'services/tts/Dockerfile'
      args:
        BUILDKIT_INLINE_CACHE: '1'
    image: 'discord-voice-tts:latest'
    env_file:
      - './.env.common'
      - './.env.docker'
      - './services/tts/.env.service'
    ports:
      - '8027:7000'
    volumes:
      - './services/models/tts:/app/models:ro'
      - './debug:/app/debug'
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; import sys; try: response = httpx.get('http://localhost:7000/health/ready', timeout=5.0); sys.exit(0 if response.status_code == 200 else 1) except Exception: sys.exit(1)"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: 'unless-stopped'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'
