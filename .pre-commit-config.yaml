# Pre-commit hooks configuration
# https://pre-commit.com/
# Purpose: Automatically run linting and formatting tools before each commit

repos:
  # General file quality hooks
  # Purpose: Catch common file issues and ensure basic quality standards
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$' # Allow trailing spaces in Markdown (used for line breaks)
      - id: end-of-file-fixer # Ensure files end with newline
      - id: check-yaml
        args: ["--unsafe"] # Allow unsafe YAML (needed for some Docker Compose files)
      - id: check-json # Validate JSON syntax
      - id: check-toml # Validate TOML syntax
      - id: check-merge-conflict # Detect merge conflict markers
      - id: check-added-large-files
        args: ["--maxkb=1000"] # Prevent accidentally committing large files
      - id: check-case-conflict # Detect case conflicts in filenames
      - id: debug-statements # Detect debug statements (print, pdb, etc.)
      - id: detect-private-key # Detect private keys in commits

  # Python code formatting and linting
  # Purpose: Ensure consistent Python code style and catch common issues

  - repo: local
    hooks:
      - id: ruff
        name: ruff
        entry: .venv/bin/ruff
        language: system
        args: ["check", "--fix", "--exit-non-zero-on-fix"]
        files: '\.py$'
      - id: ruff-format
        name: ruff-format
        entry: .venv/bin/ruff
        language: system
        args: ["format"]
        files: '\.py$'

  - repo: local
    hooks:
      - id: mypy
        name: mypy
        entry: .venv/bin/mypy
        language: system
        args: ["--ignore-missing-imports"]
        files: '\.py$'

  # YAML file linting
  # Purpose: Ensure YAML files are properly formatted and follow best practices
  # DISABLED: Use Docker-based linting instead (make lint)
  # - repo: https://github.com/adrienverge/yamllint
  #   rev: v1.35.1
  #   hooks:
  #     - id: yamllint
  #       args: ["-c", ".yamllint"] # Use our custom yamllint configuration

  # Markdown file linting
  # Purpose: Ensure Markdown files are properly formatted and follow best practices
  # DISABLED: Use Docker-based linting instead (make lint)
  # - repo: https://github.com/igorshubovych/markdownlint-cli
  #   rev: v0.37.0
  #   hooks:
  #     - id: markdownlint
  #       args: ["--config", ".markdownlint.yaml"] # Use our custom markdownlint configuration

  # Dockerfile linting
  # Purpose: Ensure Dockerfiles follow best practices and security guidelines
  # DISABLED: Use Docker-based linting instead (make lint)
  # - repo: https://github.com/hadolint/hadolint
  #   rev: v2.12.0
  #   hooks:
  #     - id: hadolint
  #       args: ["--config", ".hadolint.yaml"] # Use our custom hadolint configuration

  # Security analysis using local .venv
  # Purpose: Detect security vulnerabilities and anti-patterns in agent-generated code
  # DISABLED: Use Docker-based linting instead (make lint)
  # - repo: local
  #   hooks:
  #     - id: bandit
  #       name: bandit
  #       entry: .venv/bin/bandit
  #       language: system
  #       args: ["-r", "-f", "json", "-o", "bandit-report.json"]
  #       exclude: "tests/.*"
  #       files: '\.py$'

  # Secret detection using local .venv
  # DISABLED: Use Docker-based linting instead (make lint)
  # - repo: local
  #   hooks:
  #     - id: detect-secrets
  #       name: detect-secrets
  #       entry: .venv/bin/detect-secrets
  #       language: system
  #       args: ["scan", "--baseline", ".secrets.baseline"]
  #       exclude: '\.env.*'
  #       files: '\.(py|yaml|yml|json|txt|md)$'

  # Code complexity analysis using local .venv
  # DISABLED: Use Docker-based linting instead (make lint)
  # - repo: local
  #   hooks:
  #     - id: radon-cc
  #       name: radon-cc
  #       entry: .venv/bin/radon
  #       language: system
  #       args: ["cc", "--min", "B", "services/"]
  #       files: '\.py$'
  #     - id: radon-mi
  #       name: radon-mi
  #       entry: .venv/bin/radon
  #       language: system
  #       args: ["mi", "--min", "B", "services/"]
  #       files: '\.py$'

  # Test execution using local .venv
  # Purpose: Run tests before commit to catch failures early
  - repo: local
    hooks:
      - id: test
        name: test
        entry: make
        language: system
        args: ["test"]
        files: '\.py$'
        pass_filenames: false
        always_run: true

  # Commit message validation using local .venv
  - repo: local
    hooks:
      - id: commitizen
        name: commitizen
        entry: .venv/bin/cz
        language: system
        stages: [commit-msg]
        args: ["check", "--rev-range", "HEAD~1..HEAD"]

# Global configuration
default_language_version:
  python: python3.12 # Use Python 3.12 as the default language version

# Exclude patterns
# Purpose: Skip linting for generated files, caches, and other non-source files
exclude: |
  (?x)^(
    \.git/.*|          # Git internal files
    \.venv/.*|         # Python virtual environment
    \.eggs/.*|         # Python egg cache
    build/.*|          # Build artifacts
    dist/.*|           # Distribution artifacts
    \.mypy_cache/.*|   # MyPy cache
    \.pytest_cache/.*| # Pytest cache
    __pycache__/.*|    # Python bytecode cache
    \.ruff_cache/.*|   # Ruff cache
    htmlcov/.*|        # Coverage HTML reports
    \.coverage.*|      # Coverage data files
    coverage\.xml|     # Coverage XML reports
    \.tox/.*|          # Tox cache
    \.env.*|           # Environment files
    node_modules/.*    # Node.js dependencies
  )$
