# Pre-commit hooks configuration - Docker-first approach
# Purpose: Orchestrate Docker-based linting for consistent developer experience
# https://pre-commit.com/

repos:
  # Basic file quality hooks (lightweight, no external dependencies)
  # Purpose: Catch common file issues and ensure basic quality standards
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$' # Allow trailing spaces in Markdown (used for line breaks)
      - id: end-of-file-fixer # Ensure files end with newline
      - id: check-yaml
        args: ["--unsafe"] # Allow unsafe YAML (needed for some Docker Compose files)
      - id: check-json # Validate JSON syntax
      - id: check-toml # Validate TOML syntax
      - id: check-merge-conflict # Detect merge conflict markers
      - id: check-added-large-files
        args: ["--maxkb=1000"] # Prevent accidentally committing large files
      - id: check-case-conflict # Detect case conflicts in filenames
      - id: debug-statements # Detect debug statements (print, pdb, etc.)
      - id: detect-private-key # Detect private keys in commits

  # Docker-based comprehensive linting (on staged files)
  # Purpose: Run comprehensive linting in Docker for consistency
  - repo: local
    hooks:
      - id: docker-lint-staged
        name: Comprehensive Linting (Docker)
        entry: make
        language: system
        args: ["lint"]
        pass_filenames: false
        always_run: true

  # Security analysis (run on Python files only, less frequently)
  # Purpose: Run security checks without triggering infinite loops
  - repo: local
    hooks:
      - id: docker-lint-security
        name: Security Analysis (Docker)
        entry: make
        language: system
        args: ["lint-security"]
        files: '\.py$'
        pass_filenames: false
        always_run: false

  # Docker-based testing
  # Purpose: Run tests in Docker for consistency
  - repo: local
    hooks:
      - id: docker-test
        name: Testing (Docker)
        entry: make
        language: system
        args: ["test"]
        files: '\.py$'
        pass_filenames: false
        always_run: true

  # Commit message validation (lightweight local tool)
  # Purpose: Ensure commit messages follow conventional commit format
  - repo: local
    hooks:
      - id: commitizen
        name: commitizen
        entry: .venv/bin/cz
        language: system
        stages: [commit-msg]
        args: ["check", "--rev-range", "HEAD~1..HEAD"]

# Global configuration
default_language_version:
  python: python3.12 # Use Python 3.12 as the default language version

# Exclude patterns
# Purpose: Skip linting for generated files, caches, and other non-source files
exclude: |
  (?x)^(
    \.git/.*|          # Git internal files
    \.venv/.*|         # Python virtual environment
    \.eggs/.*|         # Python egg cache
    build/.*|          # Build artifacts
    dist/.*|           # Distribution artifacts
    \.mypy_cache/.*|   # MyPy cache
    \.pytest_cache/.*| # Pytest cache
    __pycache__/.*|    # Python bytecode cache
    \.ruff_cache/.*|   # Ruff cache
    htmlcov/.*|        # Coverage HTML reports
    \.coverage.*|      # Coverage data files
    coverage\.xml|     # Coverage XML reports
    \.tox/.*|          # Tox cache
    \.env.*|           # Environment files
    node_modules/.*|   # Node.js dependencies
    \.secrets\.baseline$|  # Secrets baseline file (prevents infinite loops)
    \.secrets\.baseline\.json$|  # Secrets baseline JSON file
    bandit-report\.json$|  # Bandit security report file
  )$
