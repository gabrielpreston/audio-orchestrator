[build-system]
requires = ["setuptools>=75.6.0", "wheel>=0.45.1"]
build-backend = "setuptools.build_meta"

[project]
name = "discord-voice-lab"
version = "1.0.0"
description = "Voice-first Discord assistant with STT, LLM, and TTS services"
authors = [
    {name = "Discord Voice Lab Team", email = "team@discord-voice-lab.dev"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    services/models
    | \.venv
    | \.git
    | \.mypy_cache
    | \.tox
    | \.pytest_cache
    | __pycache__
)/
'''

[tool.isort]
line_length = 100
profile = "black"
known_first_party = ["services"]
known_third_party = [
    "discord", "fastapi", "uvicorn", "pydantic", "httpx", "structlog",
    "librosa", "soundfile", "numpy", "webrtcvad", "openwakeword", "rapidfuzz",
    "faster_whisper", "llama_cpp", "piper", "mcp", "instructor"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
lines_after_imports = 2

[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = [
    "services/models",
    "services/tests/fixtures",
    "services/tests/mocks",
    "services/tests/utils",
    ".venv",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    "__pycache__"
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PIE",    # flake8-pie
    "TCH",    # flake8-type-checking
    "ERA",    # eradicate
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "B006",   # do not use mutable data structures for argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "TCH003", # move standard library import into TYPE_CHECKING block
]

[tool.ruff.lint.isort]
known-first-party = ["services"]
known-third-party = [
    "discord", "fastapi", "uvicorn", "pydantic", "httpx", "structlog",
    "librosa", "soundfile", "numpy", "webrtcvad", "openwakeword", "rapidfuzz",
    "faster_whisper", "llama_cpp", "piper", "mcp", "instructor"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true
exclude = [
    "^services/models/",
    "^services/tests/",
    "^services/tests/fixtures/",
    "^services/tests/mocks/",
    "^services/tests/utils/",
    "^__pycache__/",
    "^.venv/",
    "^.git/",
    "^.mypy_cache/",
    "^.pytest_cache/"
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "discord.*",
    "discord_ext.*",
    "librosa.*",
    "soundfile.*",
    "webrtcvad.*",
    "openwakeword.*",
    "rapidfuzz.*",
    "faster_whisper.*",
    "llama_cpp.*",
    "piper.*",
    "mcp.*",
    "instructor.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# This section is duplicated from pytest.ini for tool compatibility
testpaths = ["services"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=70",
    "--junitxml=junit.xml",
    "-ra",
    "--tb=short",
    "--maxfail=10"
]
markers = [
    "unit: Unit tests (fast, isolated, no external dependencies)",
    "component: Component tests (with mocked external dependencies)",
    "integration: Integration tests (require Docker Compose)",
    "e2e: End-to-end tests (manual trigger only)",
    "slow: Slow tests (>1 second execution time)",
    "external: Tests requiring external services or network access",
    "audio: Tests involving audio processing",
    "discord: Tests involving Discord API",
    "stt: Tests involving speech-to-text",
    "tts: Tests involving text-to-speech",
    "llm: Tests involving language model",
    "orchestrator: Tests involving orchestration logic"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:librosa",
    "ignore::UserWarning:soundfile",
    "ignore::FutureWarning:numpy",
    "ignore::RuntimeWarning:numpy"
]
collect_ignore = [
    "services/models",
    "services/tests/fixtures",
    "services/tests/mocks",
    "services/tests/utils"
]
minversion = "8.0"
