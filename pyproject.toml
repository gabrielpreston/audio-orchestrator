[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/.venv/**", "**/build/**", "**/dist/**"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "RET", # flake8-return
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # within an except clause, raise exceptions with raise ... from err
    "UP038", # use X | Y in isinstance call instead of (X, Y)
    "S101",  # use of assert (common in tests)
    "S104",  # hardcoded bind all interfaces (common in Docker)
    "S311",  # random usage for jitter in retry logic (non-cryptographic)
    "S603",  # subprocess call (common in Docker)
    "S607",  # starting a process with a partial executable path
    "RET504", # unnecessary assignment before return
    "RET505", # unnecessary else after return
    "SIM108", # use ternary operator (sometimes less readable)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py

[tool.ruff.lint.isort]
known-first-party = ["services"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
follow_imports = "skip"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_any_generics = true
disallow_any_unimported = false  # Allow external imports to be Any
disallow_any_expr = false  # Too strict for practical use
# Ignore all external imports - focus on our code only
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "services.tests.*",
    "services.*.tests.*",
    "services.*.conftest",
    "services.tests.conftest",
    "services.tests.mocks.*",
    "services.common.test_config",
    "services.common.config_examples",
    "services.common.tests.*",
    "services.orchestrator.tests.*",
    "services.common.tests.conftest",
    "services.orchestrator.tests.conftest",
    "services.tests.conftest",
    "services.tests.mocks.discord_client",
]
# Only test files and examples get lenient treatment
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false
warn_no_return = false
warn_unreachable = false
strict_equality = false

[tool.pytest.ini_options]
# Test discovery
testpaths = ["services"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test execution options
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=14",
    "--junitxml=junit.xml",
    "-ra",
    "--tb=short",
    "--maxfail=10",
]

# Asyncio configuration
asyncio_default_fixture_loop_scope = "function"

# Markers for test categorization
markers = [
    "unit: Unit tests (fast, isolated, no external dependencies)",
    "component: Component tests (with mocked external dependencies)",
    "integration: Integration tests (require Docker Compose)",
    "e2e: End-to-end tests (manual trigger only)",
    "slow: Slow tests (>1 second execution time)",
    "external: Tests requiring external services or network access",
    "audio: Tests involving audio processing",
    "discord: Tests involving Discord API",
    "stt: Tests involving speech-to-text",
    "tts: Tests involving text-to-speech",
    "llm: Tests involving language model",
    "orchestrator: Tests involving orchestration logic",
]

# Warnings configuration
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:librosa",
    "ignore::UserWarning:soundfile",
    "ignore::FutureWarning:numpy",
    "ignore::RuntimeWarning:numpy",
]


# Minimum version requirements
minversion = "8.0"

