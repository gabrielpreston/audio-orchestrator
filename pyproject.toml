[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
# Black code formatter configuration
# Purpose: Ensures consistent Python code formatting across the project
line-length = 88  # Standard line length for Python projects (PEP 8 recommends 79, but 88 is more practical)
target-version = ['py311']  # Target Python 3.11 for modern syntax features
include = '\.pyi?$'  # Include both .py and .pyi files (type stubs)
extend-exclude = '''
/(
  # Exclude common build and cache directories to avoid formatting generated files
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
# isort import sorting configuration
# Purpose: Organizes imports in a consistent, readable manner that works with Black
profile = "black"  # Use Black-compatible import sorting style
multi_line_output = 3  # Use vertical hanging indent for multi-line imports (Black-compatible)
line_length = 88  # Match Black's line length to prevent conflicts
include_trailing_comma = true  # Always include trailing commas (Black requirement)
force_grid_wrap = 0  # Don't force grid wrapping (let Black handle it)
use_parentheses = true  # Use parentheses for multi-line imports (Black-compatible)
ensure_newline_before_comments = true  # Add blank line before import comments for readability
lines_after_imports = 2  # Add 2 blank lines after imports (PEP 8 compliance)
skip_glob = ["**/.venv/**", "**/build/**", "**/dist/**"]  # Skip virtual environments and build directories
known_first_party = ["services"]  # Align with Ruff's isort config to classify internal package

[tool.ruff]
# Ruff linter configuration
# Purpose: Fast Python linting that replaces multiple tools (flake8, isort, etc.)
target-version = "py311"  # Target Python 3.11 for modern syntax features
line-length = 88  # Match Black's line length to prevent conflicts

[tool.ruff.lint]
# Ruff linting rules selection
# Purpose: Enable comprehensive code quality checks while maintaining reasonable strictness
select = [
    # Core Python style and error detection
    "E",   # pycodestyle errors - catches basic Python style violations
    "W",   # pycodestyle warnings - catches style issues that aren't errors
    "F",   # pyflakes - catches unused imports, undefined names, and other logical errors
    "B",   # flake8-bugbear - catches common bugs and design problems
    "C4",  # flake8-comprehensions - suggests better list/dict comprehensions
    "UP",  # pyupgrade - suggests modern Python syntax (e.g., f-strings, walrus operator)
    "N",   # pep8-naming - enforces PEP 8 naming conventions
    "S",   # flake8-bandit - security-focused linting (catches potential security issues)
    "RET", # flake8-return - catches unnecessary return statements and else blocks
    "SIM", # flake8-simplify - suggests code simplifications
    
    # Import and type checking
    "TCH", # flake8-type-checking - catches imports that should be TYPE_CHECKING
    "TID", # flake8-tidy-imports - enforces import organization and naming
    "ARG", # flake8-unused-arguments - catches unused function arguments
    "PIE", # flake8-pie - catches various code issues (e.g., unnecessary pass)
    "A",   # flake8-builtins - prevents shadowing of built-in names
    "COM", # flake8-commas - enforces trailing comma usage (Black compatibility)
    "C90", # mccabe - measures cyclomatic complexity
    "DTZ", # flake8-datetimez - catches timezone-naive datetime usage
    "EM",  # flake8-errmsg - catches error messages that should be f-strings
    "EXE", # flake8-executable - catches executable files that shouldn't be
    "FA",  # flake8-future-annotations - enforces from __future__ import annotations
    "ISC", # flake8-implicit-str-concat - catches implicit string concatenation
    "ICN", # flake8-import-conventions - enforces import naming conventions
    "G",   # flake8-logging-format - catches logging format issues
    "INP", # flake8-no-pep420 - catches implicit namespace packages
    "PTH", # flake8-use-pathlib - suggests pathlib over os.path
    "ERA", # eradicate - catches commented-out code
    "PD",  # pandas-vet - catches pandas anti-patterns
    "PGH", # pygrep-hooks - catches various code patterns
    "PL",  # pylint - catches various code quality issues
    "PT",  # flake8-pytest-style - enforces pytest best practices
    "Q",   # flake8-quotes - enforces consistent quote usage
    "RSE", # flake8-raise - catches raise statements that should use 'from'
    "RUF", # ruff-specific rules - catches Ruff-specific issues
    "T20", # flake8-print - catches print statements (useful for scripts)
    "YTT", # flake8-2020 - catches Python 3.8+ specific issues
]
ignore = [
    # Black compatibility - let Black handle these formatting issues
    "E501",  # line too long - Black handles line length automatically
    "COM812", # missing trailing comma - Black handles comma placement
    
    # Function argument and complexity rules - too strict for our use case
    "B008",  # do not perform function calls in argument defaults - sometimes necessary for dependency injection
    "C901",  # too complex - some functions need to be complex (e.g., main event loops)
    "PLR0913", # too many arguments - common in service constructors with many config options
    "PLR0912", # too many branches - common in complex business logic
    "PLR0915", # too many statements - common in main functions and event handlers
    
    # Exception handling - sometimes we need different patterns
    "B904",  # within an except clause, raise exceptions with raise ... from err - not always applicable
    "RSE",   # flake8-raise - sometimes we want to re-raise without 'from'
    
    # Modern Python syntax - some features not available in our target version
    "UP038", # use X | Y in isinstance call instead of (X, Y) - requires Python 3.10+
    
    # Security rules - too strict for our development environment
    "S101",  # use of assert - common and necessary in tests
    "S104",  # hardcoded bind all interfaces - common in Docker development
    "S311",  # random usage for jitter in retry logic - non-cryptographic usage is fine
    "S603",  # subprocess call - common in Docker and deployment scripts
    "S607",  # starting a process with a partial executable path - common in containerized environments
    
    # Code style - sometimes readability trumps strict rules
    "RET504", # unnecessary assignment before return - sometimes clearer than one-liner
    "RET505", # unnecessary else after return - sometimes improves readability
    "SIM108", # use ternary operator - sometimes if/else is more readable
    "PLR2004", # magic value used in comparison - sometimes constants are overkill
    "ISC001", # implicitly concatenated string literals - common in SQL queries and long strings
    "T201", # print statements - common in scripts and debugging
    "ERA001", # commented out code - sometimes needed for debugging or future features

    # Temporary relaxations to align with current codebase until follow-up refactors
    # Exception message formatting and raises patterns
    "EM",      # flake8-errmsg family (EM101/EM102)
    # Type-checking import placement
    "TCH001", "TCH002", "TCH003",
    # Pytest style adjustments
    "PT011", "PT012", "PT023",
    # Pygrep hooks specifics not yet narrowed
    "PGH003",
    # Ruff-specific tidy-ups that require code changes
    "RUF006", "RUF019", "RUF100",
    # Complexity/structure where current implementations intentionally branch/return early
    "PLR0911",
]

[tool.ruff.lint.per-file-ignores]
# Per-file rule ignores - relax rules for specific file types where appropriate
"__init__.py" = ["F401"]  # unused imports - __init__.py files often import for re-export
"**/tests/**/*.py" = [
    "S101",    # use of assert - essential for testing
    "S106",    # hardcoded password - test fixtures often contain test credentials
    "S108",    # hardcoded temp file - test fixtures often use temp files
    "PLR2004", # magic value used in comparison - test assertions often use magic values
    "PLR0913", # too many arguments - test fixtures often have many parameters
    "PLR0912", # too many branches - test cases often have complex branching
    "PLR0915", # too many statements - test functions can be long
    "PT001",   # prefer @pytest.fixture() over @pytest.fixture - allow existing style
    "PT004",   # fixture returns nothing - allow without leading underscore rename
    "ARG001",  # allow unused function argument in tests
    "ARG002",  # allow unused method argument in tests
]
"**/conftest.py" = [
    "F401", # unused imports - pytest conftest files often import for fixtures
    "F403", # star imports - conftest files often use star imports for fixtures
    "F405", # undefined name from star import - side effect of star imports
]
"**/migrations/**/*.py" = ["ALL"]  # database migrations - generated code, skip all linting
"**/scripts/**/*.py" = [
    "T201", # print statements - scripts often use print for output
    "T20",  # print statements - alternative rule for print statements
]

[tool.ruff.lint.isort]
# Ruff's isort integration configuration
# Purpose: Ensures import sorting is consistent with isort settings and Black formatting
known-first-party = ["services"]  # Mark our services package as first-party for proper import grouping
force-single-line = false  # Allow multi-line imports (Black-compatible)
force-sort-within-sections = true  # Sort imports within each section (stdlib, third-party, first-party)
lines-after-imports = 2  # Add 2 blank lines after imports (PEP 8 compliance)
lines-between-types = 1  # Add 1 blank line between different import types for readability

[tool.ruff.lint.flake8-quotes]
# Quote style configuration
# Purpose: Enforce consistent quote usage throughout the codebase
docstring-quotes = "double"  # Use double quotes for docstrings (PEP 257 recommendation)
inline-quotes = "double"  # Use double quotes for inline strings (consistent with docstrings)
multiline-quotes = "double"  # Use double quotes for multiline strings (consistency)

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
follow_imports = "skip"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_any_generics = true
disallow_any_unimported = false  # Allow external imports to be Any
disallow_any_expr = false  # Too strict for practical use
# Ignore all external imports - focus on our code only
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "services.tests.*",
    "services.*.tests.*",
    "services.*.conftest",
    "services.tests.conftest",
    "services.tests.mocks.*",
    "services.common.test_config",
    "services.common.config_examples",
    "services.common.tests.*",
    "services.orchestrator.tests.*",
    "services.common.tests.conftest",
    "services.orchestrator.tests.conftest",
    "services.tests.conftest",
    "services.tests.mocks.discord_client",
]
# Only test files and examples get lenient treatment
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
disallow_any_generics = false

[tool.pytest.ini_options]
# Test discovery
testpaths = ["services"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test execution options
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=25",
    "--junitxml=junit.xml",
    "-ra",
    "--tb=short",
    "--maxfail=10",
]

# Asyncio configuration
asyncio_default_fixture_loop_scope = "function"

# Markers for test categorization
markers = [
    "unit: Unit tests (fast, isolated, no external dependencies)",
    "component: Component tests (with mocked external dependencies)",
    "integration: Integration tests (require Docker Compose)",
    "e2e: End-to-end tests (manual trigger only)",
    "slow: Slow tests (>1 second execution time)",
    "external: Tests requiring external services or network access",
    "audio: Tests involving audio processing",
    "discord: Tests involving Discord API",
    "stt: Tests involving speech-to-text",
    "tts: Tests involving text-to-speech",
    "llm: Tests involving language model",
    "orchestrator: Tests involving orchestration logic",
]

# Warnings configuration
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:librosa",
    "ignore::UserWarning:soundfile",
    "ignore::FutureWarning:numpy",
    "ignore::RuntimeWarning:numpy",
]


# Minimum version requirements
minversion = "8.0"

