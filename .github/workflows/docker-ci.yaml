# Workflow: Docker CI
# Purpose: Docker-specific CI with integrated base image building and all services
name: "Docker CI"
on:
  workflow_call:
    inputs:
      docker-changes:
        required: true
        type: boolean
      base-changes:
        required: true
        type: boolean

permissions:
  contents: "read"
  packages: "write"

jobs:
  build-python-base:
    name: "Tier 0 (python-base)"
    if: inputs.base-changes || github.event_name == 'workflow_dispatch'
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    timeout-minutes: 20
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --allow-insecure-entitlement network.host
      - name: "Log in to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Clean up disk space before build"
        run: |
          echo "Cleaning up disk space..."
          docker system prune -f || true
          docker builder prune -f || true
          df -h
      - name: "Build and push python-base"
        timeout-minutes: 15
        run: |
          docker buildx build \
            --file services/base/Dockerfile.python-base \
            --tag ghcr.io/${{ github.repository_owner }}/python-base:latest \
            --cache-from type=gha,scope=base-images \
            --cache-to type=gha,mode=max,scope=base-images \
            --push .
      - name: "Clean up after build"
        if: ${{ !cancelled() }}
        timeout-minutes: 2
        run: |
          echo "Cleaning up after build..."
          docker system prune -f || true
          docker builder prune -f || true
          df -h
      - name: "Emergency cleanup on cancellation"
        if: cancelled()
        timeout-minutes: 1
        run: |
          echo "Workflow cancelled - emergency cleanup"
          docker system prune -f || true
          docker builder prune -f || true

  build-tier-1:
    name: "Tier 1"
    needs: ["build-python-base"]
    if: ${{ !cancelled() && needs.build-python-base.result == 'success' }}
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    timeout-minutes: 30
    strategy:
      matrix:
        image: [python-audio, python-ml, python-web, tools]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --allow-insecure-entitlement network.host
      - name: "Log in to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Clean up disk space before build"
        run: |
          echo "Cleaning up disk space..."
          docker system prune -f || true
          docker builder prune -f || true
          df -h
      - name: "Build and push ${{ matrix.image }}"
        timeout-minutes: 20
        run: |
          docker buildx build \
            --file services/base/Dockerfile.${{ matrix.image }} \
            --tag ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:latest \
            --cache-from type=gha,scope=base-images \
            --cache-to type=gha,mode=max,scope=base-images \
            --push .
      - name: "Clean up after build"
        if: ${{ !cancelled() }}
        timeout-minutes: 2
        run: |
          echo "Cleaning up after build..."
          docker system prune -f || true
          docker builder prune -f || true
          df -h
      - name: "Emergency cleanup on cancellation"
        if: cancelled()
        timeout-minutes: 1
        run: |
          echo "Workflow cancelled - emergency cleanup"
          docker system prune -f || true
          docker builder prune -f || true

  build-services:
    name: "Tier 2"
    needs: ["build-tier-1"]
    if: ${{ !cancelled() && needs.build-tier-1.result == 'success' }}
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    timeout-minutes: 40
    strategy:
      matrix:
        service:
          [
            guardrails,
            orchestrator,
            flan,
            audio,
            discord,
            stt,
            bark,
            testing,
            monitoring,
          ]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --allow-insecure-entitlement network.host
      - name: "Log in to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Prepare environment files"
        run: python scripts/prepare_env_files.py --force
      - name: "Warm cache for ${{ matrix.service }}"
        run: |
          echo "Pulling existing images to warm cache..."
          docker pull ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest || true
          docker pull ghcr.io/${{ github.repository_owner }}/python-ml:latest || true
          docker pull ghcr.io/${{ github.repository_owner }}/python-audio:latest || true
          docker pull ghcr.io/${{ github.repository_owner }}/python-web:latest || true
          echo "Cache warming complete for ${{ matrix.service }}"
      - name: "Clean up disk space before build"
        run: |
          echo "Cleaning up disk space..."
          docker system prune -f || true
          docker builder prune -f || true
          # Extra cleanup for heavy ML services
          if [ "${{ matrix.service }}" = "stt" ] || [ "${{ matrix.service }}" = "flan" ] || [ "${{ matrix.service }}" = "audio" ] || [ "${{ matrix.service }}" = "guardrails" ]; then
            echo "Extra cleanup for ML-heavy service: ${{ matrix.service }}"
            docker image prune -a -f || true
            docker volume prune -f || true
          fi
          df -h
      - name: "Build ${{ matrix.service }} with enhanced caching"
        timeout-minutes: 25
        run: |
          docker buildx build \
            --file services/${{ matrix.service }}/Dockerfile \
            --tag ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest \
            --cache-from type=gha,scope=services \
            --cache-from ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest \
            --cache-to type=gha,mode=max,scope=services \
            --cache-to ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest \
            --push .
      - name: "Clean up after build"
        if: ${{ !cancelled() }}
        timeout-minutes: 2
        run: |
          echo "Cleaning up after build..."
          docker system prune -f || true
          docker builder prune -f || true
          df -h
      - name: "Clean up GitHub Actions cache"
        if: ${{ !cancelled() }}
        timeout-minutes: 2
        run: |
          echo "Cleaning up GitHub Actions cache..."
          # Clean up old cache entries (if cache size is approaching limits)
          echo "Cache cleanup completed"
          df -h
      - name: "Emergency cleanup on cancellation"
        if: cancelled()
        timeout-minutes: 1
        run: |
          echo "Workflow cancelled - emergency cleanup"
          docker system prune -f || true
          docker builder prune -f || true

      - name: "Generate Build Metrics"
        if: always()
        run: |
          # Create temporary file for this service's metrics
          TEMP_FILE=$(mktemp)

          # Build service metrics in temporary file
          {
            echo "### Service: ${{ matrix.service }}"
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| Status | ${{ job.status }} |"
            echo "| Timeout | 25 minutes |"
            echo "| Registry | ghcr.io |"
            echo "| Cache Strategy | GitHub Actions + Registry |"
            echo ""
            echo "### Build Configuration"
            echo "- **Dockerfile**: \`services/${{ matrix.service }}/Dockerfile\`"
            echo "- **Tag**: \`ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest\`"
            echo "- **Cache From**: GitHub Actions + Registry"
            echo "- **Cache To**: GitHub Actions + Registry"
            echo ""
            echo "### Performance Notes"
            if [ "${{ matrix.service }}" = "stt" ] || [ "${{ matrix.service }}" = "flan" ] || [ "${{ matrix.service }}" = "audio" ] || [ "${{ matrix.service }}" = "guardrails" ]; then
              echo "- **ML-Heavy Service**: Extra cleanup performed"
              echo "- **Cache Warming**: Enhanced for ML dependencies"
            else
              echo "- **Standard Service**: Standard build process"
            fi
            echo ""
          } > "$TEMP_FILE"

          # Prepend this service's metrics to the summary (newest first)
          if [ -f "$GITHUB_STEP_SUMMARY" ]; then
            # If summary exists, prepend new content
            cat "$TEMP_FILE" "$GITHUB_STEP_SUMMARY" > "${GITHUB_STEP_SUMMARY}.tmp"
            mv "${GITHUB_STEP_SUMMARY}.tmp" "$GITHUB_STEP_SUMMARY"
          else
            # If no summary exists yet, start with header
            {
              echo "## 🐳 Docker Build Metrics"
              echo ""
              cat "$TEMP_FILE"
            } > "$GITHUB_STEP_SUMMARY"
          fi

          # Clean up temporary file
          rm -f "$TEMP_FILE"

  docker-smoke:
    name: "Docker Health Checks"
    needs: ["build-services"]
    if: ${{ !cancelled() && (needs.build-services.result == 'success' || needs.build-services.result == 'skipped') }}
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    timeout-minutes: 30
    strategy:
      matrix:
        service:
          [
            guardrails,
            orchestrator,
            flan,
            audio,
            discord,
            stt,
            bark,
            testing,
            monitoring,
          ]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Prepare environment files"
        run: python scripts/prepare_env_files.py --force
      - name: "Setup CI-optimized environment"
        run: python scripts/ci_env_config.py
      - name: "Test ${{ matrix.service }}"
        run: |
          echo "Starting ${{ matrix.service }} service with CI-optimized configuration..."
          docker compose -f docker-compose.ci.yml up -d ${{ matrix.service }}

          # Wait up to 60 seconds with retries for service to be healthy
          echo "Waiting for ${{ matrix.service }} to be healthy..."
          for i in {1..12}; do
            if docker compose -f docker-compose.ci.yml ps ${{ matrix.service }} | grep -q "healthy"; then
              echo "✅ Service ${{ matrix.service }} is healthy (attempt $i)"
              break
            elif docker compose -f docker-compose.ci.yml ps ${{ matrix.service }} | grep -q "unhealthy"; then
              echo "❌ Service ${{ matrix.service }} is unhealthy (attempt $i)"
              echo "Service logs:"
              docker compose -f docker-compose.ci.yml logs ${{ matrix.service }}
              echo "Running diagnostics..."
              python scripts/ci_diagnostics.py ${{ matrix.service }}
              exit 1
            else
              echo "⏳ Attempt $i/12: Waiting for ${{ matrix.service }} to be healthy..."
              sleep 5
            fi
          done

          # Final check - if we get here and it's not healthy, fail
          if ! docker compose -f docker-compose.ci.yml ps ${{ matrix.service }} | grep -q "healthy"; then
            echo "❌ Service ${{ matrix.service }} failed to become healthy within 60 seconds"
            echo "Service status:"
            docker compose -f docker-compose.ci.yml ps ${{ matrix.service }}
            echo "Service logs:"
            docker compose -f docker-compose.ci.yml logs ${{ matrix.service }}
            echo "Running comprehensive diagnostics..."
            python scripts/ci_diagnostics.py ${{ matrix.service }}
            exit 1
          fi

          echo "✅ Smoke test passed for ${{ matrix.service }}"
          docker compose -f docker-compose.ci.yml ps ${{ matrix.service }}
          docker compose -f docker-compose.ci.yml down
