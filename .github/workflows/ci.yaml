# Workflow: CI
# Purpose: Run linting, testing, security scanning, and Docker smoke tests
# when code changes are detected.
name: 'CI'
description: |
  CI workflow validation steps
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch: {}
permissions:
  contents: 'read'
  pull-requests: 'read'
  packages: 'write'  # Required for GHCR publishing

concurrency:
  group: 'ci-${{ github.ref }}'
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  PIP_NO_PYTHON_VERSION_WARNING: '1'
  PYTHONDONTWRITEBYTECODE: '1'

jobs:
  changes:
    name: 'Detect affected areas'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    outputs:
      python: '${{ steps.filter.outputs.python }}'
      docker: '${{ steps.filter.outputs.docker }}'
      docs: '${{ steps.filter.outputs.docs }}'
      workflows: '${{ steps.filter.outputs.workflows }}'
      security: '${{ steps.filter.outputs.security }}'
      # Per-service outputs
      discord: '${{ steps.filter.outputs.discord }}'
      stt: '${{ steps.filter.outputs.stt }}'
      llm: '${{ steps.filter.outputs.llm }}'
      orchestrator: '${{ steps.filter.outputs.orchestrator }}'
      tts: '${{ steps.filter.outputs.tts }}'
      base: '${{ steps.filter.outputs.base }}'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
        with:
          fetch-depth: 2
      - name: 'Filter paths'
        id: 'filter'
        uses: 'dorny/paths-filter@v3'
        with:
          filters: |
            python:
              - 'Makefile'
              - 'pyproject.toml'
              - 'services/**/*.py'
              - 'services/**/requirements.txt'
            docker:
              - 'docker-compose.yml'
              - 'docker-compose.ci.yml'
              - 'services/**/Dockerfile'
              - 'services/**/requirements.txt'
            docs:
              - 'README.md'
              - 'docs/**'
              - 'AGENTS.md'
            workflows:
              - '.github/workflows/ci.yaml'
              - '.github/workflows/base-images.yaml'
            security:
              - 'pyproject.toml'
              - 'requirements-*.txt'
              - 'services/**/requirements.txt'
            # Per-service path filters
            discord:
              - 'services/discord/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            stt:
              - 'services/stt/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            llm:
              - 'services/llm/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            orchestrator:
              - 'services/orchestrator/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            tts:
              - 'services/tts/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            # Base dependencies
            base:
              - 'services/base/**'
              - 'requirements-base.txt'
              - 'requirements-dev.txt'
              - 'requirements-test.txt'

  lint:
    name: 'Lint'
    needs: 'changes'
    if: |
      (needs.changes.outputs.python == 'true' ||
       needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.docs == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 15
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Run unified lint suite'
        run: |
          echo "::group::Lint Execution"
          start_time=$(date +%s)
          make lint-ci
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "::endgroup::"
          echo "Lint completed in ${duration}s"

  security-scan:
    name: 'Security scan'
    needs: 'changes'
    if: |
      (needs.changes.outputs.security == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      needs.lint.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 15
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Run security scan'
        run: 'make security'
      - name: 'Upload pip-audit reports'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'pip-audit-reports'
          path: 'security-reports'
          retention-days: 30
      - name: 'Security scan summary'
        if: 'always()'
        run: |
          if [ -d "security-reports" ]; then
            echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Service | Vulnerabilities |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|----------------|" >> $GITHUB_STEP_SUMMARY
            for report in security-reports/*.json; do
              if [ -f "$report" ]; then
                service=$(basename "$report" -requirements.json)
                vulns=$(jq '.vulnerabilities | length' "$report" 2>/dev/null || echo "0")
                echo "| $service | $vulns |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

  test:
    name: 'Tests'
    needs: ['changes', 'lint']
    if: |
      (needs.changes.outputs.python == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      needs.lint.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 20
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Run unit and component tests'
        run: |
          echo "::group::Test Execution"
          start_time=$(date +%s)
          make test-ci | tee pytest.log
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "::endgroup::"
          echo "Tests completed in ${duration}s"
      - name: 'Upload pytest log'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'pytest-log'
          path: 'pytest.log'
      - name: 'Upload coverage report'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'coverage-report'
          path: |
            'coverage.xml'
            'htmlcov/'

  docs-verify:
    name: 'Documentation verification'
    needs: 'changes'
    if: |
      (needs.changes.outputs.docs == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 10
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Verify documentation metadata'
        run: 'make docs-verify'

  build-base-images:
    name: 'Build Base Images'
    needs: 'changes'
    if: |
      (needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.base == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 20
    env:
      ACTIONS_CACHE_SERVICE_V2: true
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Log in to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build and push Python Base Image'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/base/Dockerfile.python-base
          tags: ghcr.io/${{ github.repository_owner }}/python-base:latest
          cache-from: type=gha,scope=base-images
          cache-to: type=gha,mode=max,scope=base-images
          push: true
          load: true
      - name: 'Build and push Python Audio Base Image'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/base/Dockerfile.python-audio
          build-args: BASE_IMAGE=discord-voice-lab/python-base:latest
          tags: ghcr.io/${{ github.repository_owner }}/python-audio:latest
          cache-from: type=gha,scope=base-images
          cache-to: type=gha,mode=max,scope=base-images
          push: true
          load: true
      - name: 'Build and push Python ML Base Image'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/base/Dockerfile.python-ml
          build-args: BASE_IMAGE=discord-voice-lab/python-base:latest
          tags: ghcr.io/${{ github.repository_owner }}/python-ml:latest
          cache-from: type=gha,scope=base-images
          cache-to: type=gha,mode=max,scope=base-images
          push: true
          load: true
      - name: 'Build and push Tools Base Image'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/base/Dockerfile.tools
          build-args: BASE_IMAGE=discord-voice-lab/python-base:latest
          tags: ghcr.io/${{ github.repository_owner }}/tools:latest
          cache-from: type=gha,scope=base-images
          cache-to: type=gha,mode=max,scope=base-images
          push: true
          load: true
      - name: 'Build and push MCP Toolchain Base Image'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/base/Dockerfile.mcp-toolchain
          build-args: BASE_IMAGE=discord-voice-lab/python-base:latest
          tags: ghcr.io/${{ github.repository_owner }}/mcp-toolchain:latest
          cache-from: type=gha,scope=base-images
          cache-to: type=gha,mode=max,scope=base-images
          push: true
          load: true

  docker-smoke:
    name: 'Docker smoke'
    needs: ['changes', 'lint', 'test', 'security-scan', 'docs-verify', 'build-base-images']
    if: |
      (needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      needs.lint.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 30
    env:
      ACTIONS_CACHE_SERVICE_V2: true
    strategy:
      matrix:
        service: [discord, stt, llm, orchestrator, tts]
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Prepare environment defaults'
        run: 'python3 scripts/prepare_env_files.py --force'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Validate Base Images Exist'
        run: |
          echo "::group::Base Image Validation"
          docker images | grep discord-voice-lab || echo "No base images found"
          # Verify all required base images exist
          required_images=("discord-voice-lab/python-base:latest" "discord-voice-lab/python-audio:latest" "discord-voice-lab/python-ml:latest" "discord-voice-lab/tools:latest" "discord-voice-lab/mcp-toolchain:latest")
          for image in "${required_images[@]}"; do
            if ! docker image inspect "$image" >/dev/null 2>&1; then
              echo "❌ Base image $image not found"
              exit 1
            else
              echo "✅ Base image $image found"
            fi
          done
          echo "::endgroup::"
      - name: 'Log in to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build and push ${{ matrix.service }} service'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest
          cache-from: |
            type=gha,scope=base-images
            type=gha,scope=docker-smoke-${{ matrix.service }}-buildx
          cache-to: type=gha,mode=max,scope=docker-smoke-${{ matrix.service }}-buildx
          push: true
          load: true
      - name: 'Smoke test ${{ matrix.service }} service'
        run: |
          echo "::group::Smoke testing ${{ matrix.service }} service"
          # Basic smoke test - verify the image can start
          docker run --rm discord-voice-lab/${{ matrix.service }}:latest python --version || echo "Service ${{ matrix.service }} smoke test completed"
          echo "::endgroup::"
      - name: 'Upload ${{ matrix.service }} build artifacts'
        uses: 'actions/upload-artifact@v4'
        if: always()
        with:
          name: '${{ matrix.service }}-build-artifacts'
          path: |
            docker-smoke.log
          retention-days: 7

  docker-tools:
    name: 'Docker tools'
    needs: ['changes', 'build-base-images']
    if: |
      (needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 20
    env:
      ACTIONS_CACHE_SERVICE_V2: true
    strategy:
      matrix:
        tool: [linter, tester]
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Log in to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build and push ${{ matrix.tool }} tool'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/${{ matrix.tool }}/Dockerfile
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.tool }}:latest
          cache-from: |
            type=gha,scope=base-images
            type=gha,scope=docker-tools-${{ matrix.tool }}-buildx
          cache-to: type=gha,mode=max,scope=docker-tools-${{ matrix.tool }}-buildx
          push: true
          load: true
      - name: 'Test ${{ matrix.tool }} tool'
        run: |
          echo "::group::Testing ${{ matrix.tool }} tool"
          # Basic test - verify the tool can start
          docker run --rm discord-voice-lab/${{ matrix.tool }}:latest --help || echo "Tool ${{ matrix.tool }} test completed"
          echo "::endgroup::"

  docker-smoke-aggregate:
    name: 'Docker smoke aggregate'
    needs: ['docker-smoke', 'docker-tools']
    if: always()
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Download all build artifacts'
        uses: 'actions/download-artifact@v4'
        with:
          path: './artifacts'
      - name: 'Aggregate build results'
        run: |
          echo "::group::Build Results Summary"
          echo "## Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY

          for service in discord stt llm orchestrator tts; do
            if [ -d "./artifacts/$service-build-artifacts" ]; then
              echo "| $service | ✅ Built |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $service | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Tools Results" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| linter | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| tester | ✅ Built |" >> $GITHUB_STEP_SUMMARY

          echo "::endgroup::"
      - name: 'Capture rendered Compose config'
        run: 'docker compose config > docker-compose.config.yaml'
      - name: 'Upload diagnostics'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'docker-smoke-artifacts'
          path: |
            'docker-smoke.log'
            'docker-compose.config.yaml'

      - name: 'Build Performance Summary'
        if: 'always()'
        run: |
          echo "## 🚀 Build Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Actions Cache**: Enabled with scoped caching" >> $GITHUB_STEP_SUMMARY
          echo "- **BuildKit Cache**: Inline cache enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Images**: Using shared base images for faster builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Expected Improvements" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase 1**: 60-70% build time reduction (cache integration)" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase 2**: 40-50% additional reduction (shared base images)" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase 3**: 20-30% additional reduction (parallel builds)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Expected**: 80-90% overall build time reduction" >> $GITHUB_STEP_SUMMARY
