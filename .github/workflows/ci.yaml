# Workflow: CI
# Purpose: Run linting, testing, security scanning, and Docker smoke tests
# when code changes are detected.
name: 'CI'
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch: {}
permissions:
  contents: 'read'
  pull-requests: 'read'
  packages: 'write'  # Required for GHCR publishing

concurrency:
  group: 'ci-${{ github.ref }}'
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  PIP_NO_PYTHON_VERSION_WARNING: '1'
  PYTHONDONTWRITEBYTECODE: '1'

jobs:
  changes:
    name: 'Detect affected areas'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    outputs:
      python: '${{ steps.filter.outputs.python }}'
      docker: '${{ steps.filter.outputs.docker }}'
      docs: '${{ steps.filter.outputs.docs }}'
      default-ci-workflow: '${{ steps.filter.outputs.default-ci-workflow }}'
      base-images-workflow: '${{ steps.filter.outputs.base-images-workflow }}'
      security: '${{ steps.filter.outputs.security }}'
      # Per-service outputs
      discord: '${{ steps.filter.outputs.discord }}'
      stt: '${{ steps.filter.outputs.stt }}'
      llm: '${{ steps.filter.outputs.llm }}'
      orchestrator: '${{ steps.filter.outputs.orchestrator }}'
      tts: '${{ steps.filter.outputs.tts }}'
      base: '${{ steps.filter.outputs.base }}'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
        with:
          fetch-depth: 2
      - name: 'Filter paths'
        id: 'filter'
        uses: 'dorny/paths-filter@v3'
        with:
          filters: |
            python:
              - 'Makefile'
              - 'pyproject.toml'
              - 'services/**/*.py'
              - 'services/**/requirements.txt'
            docker:
              - 'docker-compose.yml'
              - 'docker-compose.ci.yml'
              - 'services/**/Dockerfile'
              - 'services/**/requirements.txt'
            docs:
              - 'README.md'
              - 'docs/**'
              - 'AGENTS.md'
            default-ci-workflow:
              - '.github/workflows/ci.yaml'
            base-images-workflow:
              - '.github/workflows/base-images.yaml'
            security:
              - 'pyproject.toml'
              - 'requirements-*.txt'
              - 'services/**/requirements.txt'
            # Per-service path filters
            discord:
              - 'services/discord/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            stt:
              - 'services/stt/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            llm:
              - 'services/llm/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            orchestrator:
              - 'services/orchestrator/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            tts:
              - 'services/tts/**'
              - 'services/common/**'
              - 'requirements-base.txt'
            # Base dependencies
            base:
              - 'services/base/**'
              - 'requirements-base.txt'
              - 'requirements-dev.txt'
              - 'requirements-test.txt'

  lint:
    name: 'Lint'
    needs: ['changes', 'build-base-images']
    if: |
      (needs.changes.outputs.python == 'true' ||
       needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.docs == 'true' ||
       needs.changes.outputs.default-ci-workflow == 'true' ||
       needs.changes.outputs.base-images-workflow == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped')
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 15
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Cache Python dependencies'
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-
      - name: 'Setup job context'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Job started:', context.job)
            console.log('Repository:', context.repo.full_name)
            console.log('Ref:', context.ref)
            console.log('Workflow:', context.workflow)
            console.log('Run ID:', context.runId)
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Run unified lint suite'
        run: |
          echo "::group::Lint Execution"
          start_time=$(date +%s)
          make lint
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "::endgroup::"
          echo "Lint completed in ${duration}s"
      - name: 'Cleanup resources'
        if: always()
        run: |
          echo "Cleaning Docker resources..."
          docker system prune -f --volumes
          docker builder prune -f
          echo "Cleanup complete"

  security-scan:
    name: 'Security scan'
    needs: ['changes', 'lint']
    if: |
      (needs.changes.outputs.security == 'true' ||
       needs.changes.outputs.default-ci-workflow == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      (needs.lint.result == 'success' || needs.lint.result == 'skipped')
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 15
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Run security scan'
        run: 'make security'
      - name: 'Upload pip-audit reports'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'pip-audit-reports'
          path: 'security-reports'
          retention-days: 30
      - name: 'Security scan summary'
        if: 'always()'
        run: |
          if [ -d "security-reports" ]; then
            echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Service | Vulnerabilities |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|----------------|" >> $GITHUB_STEP_SUMMARY
            for report in security-reports/*.json; do
              if [ -f "$report" ]; then
                service=$(basename "$report" -requirements.json)
                vulns=$(jq '.vulnerabilities | length' "$report" 2>/dev/null || echo "0")
                echo "| $service | $vulns |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

  test:
    name: 'Tests'
    needs: ['changes', 'lint']
    if: |
      (needs.changes.outputs.python == 'true' ||
       needs.changes.outputs.default-ci-workflow == 'true' ||
       needs.changes.outputs.base-images-workflow == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      needs.lint.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 20
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Cache Python dependencies'
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-
      - name: 'Setup job context'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Job started:', context.job)
            console.log('Repository:', context.repo.full_name)
            console.log('Ref:', context.ref)
            console.log('Workflow:', context.workflow)
            console.log('Run ID:', context.runId)
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Run unit and component tests'
        run: |
          echo "::group::Test Execution"
          start_time=$(date +%s)
          make test | tee pytest.log
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "::endgroup::"
          echo "Tests completed in ${duration}s"
      - name: 'Upload pytest log'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'pytest-log'
          path: 'pytest.log'
      - name: 'Upload coverage report'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'coverage-report'
          path: |
            'coverage.xml'
            'htmlcov/'
      - name: 'Cleanup resources with reporting'
        if: always()
        run: |
          echo "::group::Resource Cleanup Report"

          # Capture before cleanup
          before_space=$(df -h / | awk 'NR==2{print $4}')
          before_images=$(docker images -q | wc -l)

          # Cleanup operations
          echo "Cleaning Docker system..."
          docker system prune -f --volumes

          echo "Cleaning build cache..."
          docker builder prune -f

          # Capture after cleanup
          after_space=$(df -h / | awk 'NR==2{print $4}')
          after_images=$(docker images -q | wc -l)

          echo "Cleanup Results:"
          echo "  Disk space: $before_space to $after_space"
          echo "  Images removed: $((before_images - after_images))"
          echo "::endgroup::"
      - name: 'Job Status Summary'
        if: always()
        run: |
          echo "::group::Job Status Summary"
          echo "Job: ${{ github.job }}"
          echo "Runner: ${{ runner.os }} (${{ runner.arch }})"
          echo "Available Space: $(df -h / | awk 'NR==2{print $4}')"
          echo "Docker Images: $(docker images -q | wc -l)"
          echo "Cache: GitHub Actions Cache v2 enabled"
          echo "Retry: Native GitHub Actions retry (3 attempts, 15min timeout)"
          echo "::endgroup::"

  docs-verify:
    name: 'Documentation verification'
    needs: ['changes']
    if: |
      (needs.changes.outputs.docs == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 10
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Verify documentation metadata'
        run: 'make docs-verify'

  build-base-images:
    name: 'Build Base Images'
    needs: ['changes']
    if: |
      (needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.base == 'true' ||
       needs.changes.outputs.base-images-workflow == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 20
    env:
      ACTIONS_CACHE_SERVICE_V2: true
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Setup job context'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Job started:', context.job)
            console.log('Repository:', context.repo.full_name)
            console.log('Ref:', context.ref)
            console.log('Workflow:', context.workflow)
            console.log('Run ID:', context.runId)
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Log in to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build and push Python Base Image with retry'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            echo "::group::Building python-base"
            echo "Dockerfile: services/base/Dockerfile.python-base"
            echo "Tag: ghcr.io/${{ github.repository_owner }}/python-base:latest"
            echo "::endgroup::"

            if ! docker buildx build \
              --file services/base/Dockerfile.python-base \
              --tag ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load .; then
              echo "::error::Build failed for python-base"
              echo "::error::Dockerfile: services/base/Dockerfile.python-base"
              echo "::error::Reproduction: docker build -f services/base/Dockerfile.python-base -t python-base:test ."
              exit 1
            fi

            docker push ghcr.io/${{ github.repository_owner }}/python-base:latest
      - name: 'Build and push Python Audio Base Image with retry'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-audio \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-audio:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-audio:latest
      - name: 'Build and push Python ML Base Image with retry'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-ml \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-ml:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-ml:latest
      - name: 'Build and push Tools Base Image with retry'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.tools \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/tools:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/tools:latest
      - name: 'Build and push MCP Toolchain Base Image with retry'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.mcp-toolchain \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/mcp-toolchain:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/mcp-toolchain:latest
      - name: 'Cleanup resources with reporting'
        if: always()
        run: |
          echo "::group::Resource Cleanup Report"

          # Capture before cleanup
          before_space=$(df -h / | awk 'NR==2{print $4}')
          before_images=$(docker images -q | wc -l)

          # Cleanup operations
          echo "Cleaning Docker system..."
          docker system prune -f --volumes

          echo "Cleaning build cache..."
          docker builder prune -f

          # Capture after cleanup
          after_space=$(df -h / | awk 'NR==2{print $4}')
          after_images=$(docker images -q | wc -l)

          echo "Cleanup Results:"
          echo "  Disk space: $before_space to $after_space"
          echo "  Images removed: $((before_images - after_images))"
          echo "::endgroup::"
      - name: 'Job Status Summary'
        if: always()
        run: |
          echo "::group::Job Status Summary"
          echo "Job: ${{ github.job }}"
          echo "Runner: ${{ runner.os }} (${{ runner.arch }})"
          echo "Available Space: $(df -h / | awk 'NR==2{print $4}')"
          echo "Docker Images: $(docker images -q | wc -l)"
          echo "Cache: GitHub Actions Cache v2 enabled"
          echo "Retry: Native GitHub Actions retry (3 attempts, 15min timeout)"
          echo "::endgroup::"

  docker-smoke:
    name: 'Docker smoke'
    needs: ['changes', 'lint', 'test', 'security-scan', 'docs-verify', 'build-base-images']
    if: |
      needs.changes.result == 'success' &&
      needs.lint.result == 'success' &&
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.docs-verify.result == 'success' || needs.docs-verify.result == 'skipped') &&
      needs.build-base-images.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 30
    env:
      ACTIONS_CACHE_SERVICE_V2: true
    strategy:
      matrix:
        service: [discord, stt, llm, orchestrator, tts]
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Setup job context'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Job started:', context.job)
            console.log('Repository:', context.repo.full_name)
            console.log('Ref:', context.ref)
            console.log('Workflow:', context.workflow)
            console.log('Run ID:', context.runId)
      - name: 'Prepare environment defaults'
        run: 'python3 scripts/prepare_env_files.py --force'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
      - name: 'Log in to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Validate Base Images Exist'
        run: |
          echo "::group::Base Image Validation for ${{ matrix.service }}"
          # Show available GHCR images (optional debugging)
          docker images | grep ghcr.io || echo "No GHCR images found locally"

          # Define service-specific base image requirements (based on actual Dockerfiles)
          case "${{ matrix.service }}" in
            discord|tts)
              # Uses python-audio base image
              required_images=("ghcr.io/${{ github.repository_owner }}/python-audio:latest")
              ;;
            stt|llm)
              # Uses python-ml base image
              required_images=("ghcr.io/${{ github.repository_owner }}/python-ml:latest")
              ;;
            orchestrator)
              # Uses both mcp-toolchain and python-ml base images
              required_images=("ghcr.io/${{ github.repository_owner }}/mcp-toolchain:latest" "ghcr.io/${{ github.repository_owner }}/python-ml:latest")
              ;;
          esac

          # Pull only required images
          for image in "${required_images[@]}"; do
            echo "Pulling $image..."
            docker pull "$image" || {
              echo "❌ Failed to pull base image $image"
              exit 1
            }
            echo "✅ Base image $image pulled successfully"
          done

          # Verify all required base images exist locally
          for image in "${required_images[@]}"; do
            if ! docker image inspect "$image" >/dev/null 2>&1; then
              echo "❌ Base image $image not found locally"
              exit 1
            else
              echo "✅ Base image $image found locally"
            fi
          done
          echo "::endgroup::"
      - name: 'Check if service needs build'
        id: check_service
        run: |
          SERVICE="${{ matrix.service }}"
          SHOULD_BUILD="false"

          # Check service-specific changes
          case "$SERVICE" in
            discord)
              if [ "${{ needs.changes.outputs.discord }}" = "true" ]; then
                SHOULD_BUILD="true"
              fi
              ;;
            stt)
              if [ "${{ needs.changes.outputs.stt }}" = "true" ]; then
                SHOULD_BUILD="true"
              fi
              ;;
            llm)
              if [ "${{ needs.changes.outputs.llm }}" = "true" ]; then
                SHOULD_BUILD="true"
              fi
              ;;
            orchestrator)
              if [ "${{ needs.changes.outputs.orchestrator }}" = "true" ]; then
                SHOULD_BUILD="true"
              fi
              ;;
            tts)
              if [ "${{ needs.changes.outputs.tts }}" = "true" ]; then
                SHOULD_BUILD="true"
              fi
              ;;
          esac

          # Check common triggers
          if [ "${{ needs.changes.outputs.docker }}" = "true" ] || \
             [ "${{ needs.changes.outputs.base }}" = "true" ] || \
             [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SHOULD_BUILD="true"
          fi

          echo "build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

          if [ "$SHOULD_BUILD" = "true" ]; then
            echo "Building $SERVICE (changes detected)"
          else
            echo "Skipping $SERVICE (no changes detected)"
          fi
      - name: 'Build and push ${{ matrix.service }} service with retry'
        if: steps.check_service.outputs.build == 'true'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            echo "::group::Building ${{ matrix.service }}"
            echo "Context: services/${{ matrix.service }}"
            echo "Dockerfile: services/${{ matrix.service }}/Dockerfile"
            echo "Tag: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest"
            echo "::endgroup::"

            if ! docker buildx build \
              --file services/${{ matrix.service }}/Dockerfile \
              --tag ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest \
              --cache-from type=gha,scope=base-images \
              --cache-from type=gha,scope=docker-smoke-${{ matrix.service }}-buildx \
              --cache-to type=gha,mode=max,scope=docker-smoke-${{ matrix.service }}-buildx \
              --load .; then
              echo "::error::Build failed for ${{ matrix.service }}"
              echo "::error::Context: services/${{ matrix.service }}"
              echo "::error::Dockerfile: services/${{ matrix.service }}/Dockerfile"
              echo "::error::Reproduction: docker build -f services/${{ matrix.service }}/Dockerfile -t ${{ matrix.service }}:test ."
              exit 1
            fi

            docker push ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest
      - name: 'Smoke test ${{ matrix.service }} service'
        if: steps.check_service.outputs.build == 'true'
        run: |
          echo "::group::Smoke testing ${{ matrix.service }} service"

          # Test basic Python functionality
          echo "Testing Python availability..."
          docker run --rm ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest python --version

          # Test service-specific imports and functionality
          case "${{ matrix.service }}" in
            discord)
              echo "Testing Discord service imports..."
              docker run --rm ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest python -c "
                from app import app
                print('✅ Discord FastAPI app imported successfully')
              "
              ;;
            stt)
              echo "Testing STT service imports..."
              docker run --rm ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest python -c "
                from app import app
                print('✅ STT FastAPI app imported successfully')
                try:
                  from faster_whisper import WhisperModel
                  print('✅ faster-whisper import successful')
                except Exception as e:
                  print('⚠️ faster-whisper import failed (expected without model):', str(e))
              "
              ;;
            llm)
              echo "Testing LLM service imports..."
              docker run --rm ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest python -c "
                from app import app
                print('✅ LLM FastAPI app imported successfully')
                try:
                  from llama_cpp import Llama
                  print('✅ llama-cpp import successful')
                except Exception as e:
                  print('⚠️ llama-cpp import failed (expected without model):', str(e))
              "
              ;;
            orchestrator)
              echo "Testing Orchestrator service imports..."
              docker run --rm ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest python -c "
                from app import app
                print('✅ Orchestrator FastAPI app imported successfully')
              "
              ;;
            tts)
              echo "Testing TTS service imports..."
              docker run --rm ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest python -c "
                from app import app
                print('✅ TTS FastAPI app imported successfully')
                try:
                  from piper import PiperVoice
                  print('✅ Piper import successful')
                except Exception as e:
                  print('⚠️ Piper import failed (expected without model):', str(e))
              "
              ;;
          esac

          echo "✅ Smoke test passed for ${{ matrix.service }}"
          echo "::endgroup::"
      - name: 'Service build skipped'
        if: steps.check_service.outputs.build == 'false'
        run: |
          echo "::notice::Skipped building ${{ matrix.service }} (no changes detected)"
      - name: 'Upload ${{ matrix.service }} build artifacts'
        uses: 'actions/upload-artifact@v4'
        if: always() && steps.check_service.outputs.build == 'true'
        with:
          name: '${{ matrix.service }}-build-artifacts'
          path: |
            docker-smoke.log
          retention-days: 7
      - name: 'Generate reproduction guide'
        if: failure() && steps.check_service.outputs.build == 'true'
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## Build Failure: ${{ matrix.service }}

          ### Local Reproduction Steps
          \`\`\`bash
          # Clone repository
          git clone https://github.com/${{ github.repository }}
          cd \$(basename ${{ github.repository }})

          # Checkout exact commit
          git checkout ${{ github.sha }}

          # Build locally
          docker build -f services/${{ matrix.service }}/Dockerfile -t ${{ matrix.service }}:test .
          \`\`\`

          ### Quick Debug Checklist
          - [ ] Check Dockerfile: \`services/${{ matrix.service }}/Dockerfile\`
          - [ ] Check requirements: \`services/${{ matrix.service }}/requirements.txt\`
          - [ ] Verify base image: \`docker pull ghcr.io/${{ github.repository_owner }}/python-base:latest\`
          - [ ] Check common files: \`services/common/\`

          ### Environment Details
          - **Runner**: ${{ runner.os }} (${{ runner.arch }})
          - **Docker**: \$(docker --version)
          - **Buildx**: \$(docker buildx version)
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          EOF
      - name: 'Cleanup resources'
        if: always()
        run: |
          echo "Cleaning Docker resources..."
          docker system prune -f --volumes
          docker builder prune -f
          echo "Cleanup complete"
      - name: 'Docker Smoke Job Status Summary'
        if: always()
        run: |
          echo "::group::Docker Smoke Job Status Summary"
          echo "Job: ${{ github.job }}"
          echo "Service: ${{ matrix.service }}"
          echo "Build Status: $([ "${{ steps.check_service.outputs.build }}" = "true" ] && echo "Built" || echo "Skipped")"
          echo "Runner: ${{ runner.os }} (${{ runner.arch }})"
          echo "Available Space: $(df -h / | awk 'NR==2{print $4}')"
          echo "Docker Images: $(docker images -q | wc -l)"
          echo "Cache: GitHub Actions Cache v2 enabled"
          echo "Retry: Native GitHub Actions retry (3 attempts, 15min timeout)"
          echo "::endgroup::"


  docker-smoke-aggregate:
    name: 'Docker smoke aggregate'
    needs: ['docker-smoke']
    if: always()
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Download all build artifacts'
        uses: 'actions/download-artifact@v4'
        with:
          path: './artifacts'
      - name: 'Aggregate build results'
        run: |
          echo "::group::Build Results Summary"
          echo "## Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY

          for service in discord stt llm orchestrator tts; do
            if [ -d "./artifacts/$service-build-artifacts" ]; then
              echo "| $service | ✅ Built |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $service | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Tools Results" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| linter | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| tester | ✅ Built |" >> $GITHUB_STEP_SUMMARY

          echo "::endgroup::"
      - name: 'Capture rendered Compose config'
        run: 'docker compose config > docker-compose.config.yaml'
      - name: 'Upload diagnostics'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'docker-smoke-artifacts'
          path: |
            'docker-smoke.log'
            'docker-compose.config.yaml'

      - name: 'Advanced Build Performance Analytics'
        if: 'always()'
        run: |
          echo "## Advanced Build Performance Analytics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Cache Performance" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Actions Cache: Enabled with scoped caching" >> $GITHUB_STEP_SUMMARY
          echo "- BuildKit Cache: Inline cache with max mode" >> $GITHUB_STEP_SUMMARY
          echo "- Base Image Strategy: Shared base images" >> $GITHUB_STEP_SUMMARY
          echo "- Retry Logic: Native GitHub Actions retry with exponential backoff" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Resource Optimization" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic Cleanup: Docker system cleanup after each job" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel Execution: Matrix strategies for independent builds" >> $GITHUB_STEP_SUMMARY
          echo "- Conditional Execution: Path-based change detection" >> $GITHUB_STEP_SUMMARY
          echo "- Build Strategy: Build-load-push with native retry" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Optimizations Implemented" >> $GITHUB_STEP_SUMMARY
          echo "- Cache integration and shared base images" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel builds with native retry logic" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic cleanup and resource management" >> $GITHUB_STEP_SUMMARY

  workflow-status:
    name: 'Workflow Status Dashboard'
    needs: [changes, lint, test, security-scan, docs-verify, build-base-images, docker-smoke, docker-smoke-aggregate]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 'Generate Status Dashboard'
        run: |
          echo "## Workflow Status Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY

          # Use valid needs.<job>.result context
          if [ "${{ needs.changes.result }}" = "success" ]; then
            echo "| changes | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.changes.result }}" = "skipped" ]; then
            echo "| changes | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| changes | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.lint.result }}" = "success" ]; then
            echo "| lint | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint.result }}" = "skipped" ]; then
            echo "| lint | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| lint | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "| test | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test.result }}" = "skipped" ]; then
            echo "| test | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| test | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "| security-scan | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-scan.result }}" = "skipped" ]; then
            echo "| security-scan | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| security-scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.docs-verify.result }}" = "success" ]; then
            echo "| docs-verify | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docs-verify.result }}" = "skipped" ]; then
            echo "| docs-verify | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| docs-verify | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-base-images.result }}" = "success" ]; then
            echo "| build-base-images | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-base-images.result }}" = "skipped" ]; then
            echo "| build-base-images | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| build-base-images | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.docker-smoke.result }}" = "success" ]; then
            echo "| docker-smoke | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docker-smoke.result }}" = "skipped" ]; then
            echo "| docker-smoke | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| docker-smoke | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi


          if [ "${{ needs.docker-smoke-aggregate.result }}" = "success" ]; then
            echo "| docker-smoke-aggregate | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docker-smoke-aggregate.result }}" = "skipped" ]; then
            echo "| docker-smoke-aggregate | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| docker-smoke-aggregate | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Strategy" >> $GITHUB_STEP_SUMMARY
          echo "- Build-Load-Push: Two-step process with native retry" >> $GITHUB_STEP_SUMMARY
          echo "- Retry Logic: nick-fields/retry@v2 with exponential backoff" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Cleanup: Automatic cleanup prevents disk issues" >> $GITHUB_STEP_SUMMARY
