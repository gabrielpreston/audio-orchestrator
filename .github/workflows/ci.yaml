# Workflow: CI
# Purpose: Run linting, testing, security scanning, and Docker smoke tests
# when code changes are detected.
name: 'CI'
description: |
  CI workflow validation steps
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch: {}
permissions:
  contents: 'read'
  pull-requests: 'read'

concurrency:
  group: 'ci-${{ github.ref }}'
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  PIP_NO_PYTHON_VERSION_WARNING: '1'
  PYTHONDONTWRITEBYTECODE: '1'

jobs:
  changes:
    name: 'Detect affected areas'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    outputs:
      python: '${{ steps.filter.outputs.python }}'
      docker: '${{ steps.filter.outputs.docker }}'
      docs: '${{ steps.filter.outputs.docs }}'
      workflows: '${{ steps.filter.outputs.workflows }}'
      security: '${{ steps.filter.outputs.security }}'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
        with:
          fetch-depth: 2
      - name: 'Filter paths'
        id: 'filter'
        uses: 'dorny/paths-filter@v3'
        with:
          filters: |
            python:
              - 'Makefile'
              - 'pyproject.toml'
              - 'services/**/*.py'
              - 'services/**/requirements.txt'
            docker:
              - 'docker-compose.yml'
              - 'services/**/Dockerfile'
              - 'services/**/requirements.txt'
            docs:
              - 'README.md'
              - 'docs/**'
              - 'AGENTS.md'
            workflows:
              - '.github/workflows/ci.yaml'
            security:
              - 'pyproject.toml'
              - 'requirements-*.txt'
              - 'services/**/requirements.txt'

  lint:
    name: 'Lint'
    needs: 'changes'
    if: |
      (needs.changes.outputs.python == 'true' ||
       needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.docs == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 15
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
      - name: 'Run unified lint suite'
        run: 'make lint'

  security-scan:
    name: 'Security scan'
    needs: 'changes'
    if: |
      (needs.changes.outputs.security == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      needs.lint.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 15
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
        with:
          driver-opts: |
            image=moby/buildkit:latest
            cache-from=type=gha
            cache-to=type=gha,mode=max
      - name: 'Run security scan'
        run: 'make security'
      - name: 'Upload pip-audit reports'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'pip-audit-reports'
          path: 'security-reports'
          retention-days: 30
      - name: 'Security scan summary'
        if: 'always()'
        run: |
          if [ -d "security-reports" ]; then
            echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Service | Vulnerabilities |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|----------------|" >> $GITHUB_STEP_SUMMARY
            for report in security-reports/*.json; do
              if [ -f "$report" ]; then
                service=$(basename "$report" -requirements.json)
                vulns=$(jq '.vulnerabilities | length' "$report" 2>/dev/null || echo "0")
                echo "| $service | $vulns |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

  test:
    name: 'Tests'
    needs: ['changes', 'lint']
    if: |
      (needs.changes.outputs.python == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      needs.lint.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 20
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
      - name: 'Run unit and component tests'
        run: 'make test | tee pytest.log'
      - name: 'Upload pytest log'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'pytest-log'
          path: 'pytest.log'
      - name: 'Upload coverage report'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'coverage-report'
          path: |
            'coverage.xml'
            'htmlcov/'

  docs-verify:
    name: 'Documentation verification'
    needs: 'changes'
    if: |
      (needs.changes.outputs.docs == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 10
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Verify documentation metadata'
        run: 'make docs-verify'

  docker-smoke:
    name: 'Docker smoke'
    needs: ['changes', 'lint', 'test', 'security-scan', 'docs-verify']
    if: |
      (needs.changes.outputs.docker == 'true' ||
       needs.changes.outputs.workflows == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      needs.changes.result == 'success' &&
      needs.lint.result == 'success'
    runs-on: 'ubuntu-latest'
    environment: 'discord-voice-lab'
    timeout-minutes: 30
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4.2.2'
      - name: 'Prepare environment defaults'
        run: 'python3 scripts/prepare_env_files.py --force'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
      - name: 'Build and validate Compose stack'
        run: 'make docker-smoke | tee docker-smoke.log'
      - name: 'Capture rendered Compose config'
        run: 'docker compose config > docker-compose.config.yaml'
      - name: 'Upload diagnostics'
        if: 'always()'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'docker-smoke-artifacts'
          path: |
            'docker-smoke.log'
            'docker-compose.config.yaml'
