# Workflow: Core CI
# Purpose: Fast Python feedback workflow using existing Make targets
name: "Core CI"
on:
  workflow_call:
    inputs:
      python-changes:
        required: true
        type: boolean

permissions:
  contents: "read"
  packages: "write"

jobs:
  lint:
    name: "Lint"
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    timeout-minutes: 10
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
      - name: "Login to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Configure build command for Makefile"
        run: echo "DOCKER_BUILD_CMD=docker buildx build --load" >> $GITHUB_ENV
      - name: "Run linting"
        run: make lint

  test-unit:
    name: "Unit Tests"
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    timeout-minutes: 10
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
      - name: "Login to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Configure build command for Makefile"
        run: echo "DOCKER_BUILD_CMD=docker buildx build --load" >> $GITHUB_ENV
      - name: "Run unit tests"
        run: make test-unit
      - name: "Upload Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: junit.xml
          retention-days: 7
      - name: "Test Results Report"
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "Unit Test Results"
          path: junit.xml
          reporter: java-junit
          fail-on-error: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Upload Coverage Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-report
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7


  test-component:
    name: "Component Tests"
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    timeout-minutes: 15
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
      - name: "Login to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Configure build command for Makefile"
        run: echo "DOCKER_BUILD_CMD=docker buildx build --load" >> $GITHUB_ENV
      - name: "Run component tests"
        run: make test-component
      - name: "Upload Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: component-test-results
          path: junit.xml
          retention-days: 7
      - name: "Test Results Report"
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "Component Test Results"
          path: junit.xml
          reporter: java-junit
          fail-on-error: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Upload Coverage Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: component-coverage-report
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7


  # Integration tests are temporarily disabled while local testing progresses
  # test-integration:
  #   name: "Integration Tests"
  #   runs-on: "ubuntu-latest"
  #   environment: "discord-voice-lab"
  #   timeout-minutes: 20
  #   steps:
  #     - name: "Checkout repository"
  #       uses: "actions/checkout@v4.2.2"
  #     - name: "Run integration tests"
  #       run: make test-integration
  #     - name: "Upload Integration Test Results"
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: integration-test-results
  #         path: junit.xml
  #         retention-days: 7
  #     - name: "Integration Test Results Report"
  #       if: always()
  #       uses: dorny/test-reporter@v1
  #       with:
  #         name: "Integration Test Results"
  #         path: junit.xml
#         reporter: java-junit
  #         fail-on-error: false

  emit-report:
    name: "Emit CI Report"
    needs: ["lint", "test-unit", "test-component"]
    if: ${{ !cancelled() }}
    runs-on: "ubuntu-latest"
    steps:
      - name: "Generate ci-report.json"
        shell: bash
        run: |
          set -euo pipefail
          started_at=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          # Derive status from upstream jobs
          status="success"
          for res in "${{ needs.lint.result }}" "${{ needs['test-unit'].result }}" "${{ needs['test-component'].result }}"; do
            if [ "$res" = "failure" ] || [ "$res" = "cancelled" ]; then
              status="$res"
            fi
          done

          coverage=""
          if [ -f coverage.xml ]; then
            coverage=$(grep -oP 'line-rate="\K[0-9.]+' coverage.xml | head -1 | awk '{printf "%.1f", $1*100}')
          fi

          ended_at=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          mkdir -p ci
          cat > ci/ci-report.json <<EOF
          {
            "workflow": "Core CI",
            "status": "${status}",
            "startedAt": "${started_at}",
            "endedAt": "${ended_at}",
            "durations": {},
            "keyMetrics": { "coverage": ${coverage:-0} },
            "notes": []
          }
          EOF
      - name: "Upload CI report"
        uses: actions/upload-artifact@v4
        with:
          name: ci-report-core-ci.json
          path: ci/ci-report.json
          retention-days: 7
