# Workflow: Main CI (Orchestrator)
# Purpose: Orchestrate change detection and route to specialized workflows
name: "Main CI"
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: "read"
  pull-requests: "read"
  packages: "write"

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  changes:
    name: "Detect affected areas"
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    outputs:
      services: "${{ steps.detect.outputs.services }}"
      base_changed: "${{ steps.detect.outputs.base_changed }}"
      python_changed: "${{ steps.detect.outputs.python_changed }}"
      docs_changed: "${{ steps.detect.outputs.docs_changed }}"
      run_core_on_workflow_change: "${{ steps.detect.outputs.run_core_on_workflow_change }}"
      run_docker_on_workflow_change: "${{ steps.detect.outputs.run_docker_on_workflow_change }}"
      run_docs_on_workflow_change: "${{ steps.detect.outputs.run_docs_on_workflow_change }}"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
        with:
          fetch-depth: 0
      - name: "Detect changes"
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="${{ github.base_ref }}"
            git fetch origin "$base_ref":"refs/remotes/origin/$base_ref" --depth=1
            DIFF_RANGE="origin/$base_ref...HEAD"
          else
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              DIFF_RANGE="HEAD^...HEAD"
            else
              first_commit=$(git rev-list --max-parents=0 HEAD | tail -n1)
              DIFF_RANGE="$first_commit...HEAD"
            fi
          fi

          files=$(git diff --name-only $DIFF_RANGE || true)

          python_changed=false
          docs_changed=false
          base_changed=false

          run_core=false
          run_docker=false
          run_docs=false

          services_set=()

          while IFS= read -r f; do
            [ -z "$f" ] && continue

            case "$f" in
              services/*/*.py|*.py) python_changed=true ;;
            esac

            case "$f" in
              docs/*|README.md|AGENTS.md) docs_changed=true ;;
            esac

            case "$f" in
              services/base/*|requirements-base.txt) base_changed=true ;;
            esac

            if [[ "$f" =~ ^services/([^/]+)/ ]]; then
              svc="${BASH_REMATCH[1]}"
              case "$svc" in
                guardrails|orchestrator|flan|audio|discord|stt|bark|testing|monitoring)
                  services_set+=("$svc") ;;
              esac
            fi

            case "$f" in
              .github/workflows/core-ci.yaml) run_core=true ;;
              .github/workflows/docker-ci.yaml) run_docker=true ;;
              .github/workflows/docs-ci.yaml) run_docs=true ;;
            esac
          done <<< "$files"

          if [ ${#services_set[@]} -gt 0 ]; then
            mapfile -t uniq < <(printf '%s\n' "${services_set[@]}" | sort -u)
            services_json=$(python3 -c 'import json,sys; print(json.dumps(sys.argv[1].split()))' "${uniq[*]}")
          else
            services_json='[]'
          fi

          echo "services=$services_json" >> "$GITHUB_OUTPUT"
          echo "base_changed=$base_changed" >> "$GITHUB_OUTPUT"
          echo "python_changed=$python_changed" >> "$GITHUB_OUTPUT"
          echo "docs_changed=$docs_changed" >> "$GITHUB_OUTPUT"
          echo "run_core_on_workflow_change=$run_core" >> "$GITHUB_OUTPUT"
          echo "run_docker_on_workflow_change=$run_docker" >> "$GITHUB_OUTPUT"
          echo "run_docs_on_workflow_change=$run_docs" >> "$GITHUB_OUTPUT"
      - name: "Generate enhanced change detection report"
        run: |
          echo "## üîç Change Detection Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Manual trigger detection
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "### üöÄ Manual Workflow Trigger" >> $GITHUB_STEP_SUMMARY
            echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            echo "**Triggered at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Full CI validation requested" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üîÑ Automatic Trigger" >> $GITHUB_STEP_SUMMARY
            echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Visual job flow map
          echo "### üó∫Ô∏è Expected Job Flow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`mermaid" >> $GITHUB_STEP_SUMMARY
          echo "graph TD" >> $GITHUB_STEP_SUMMARY
          echo "    A[üîç Change Detection] --> B{Changes Detected?}" >> $GITHUB_STEP_SUMMARY
          echo "    B -->|Yes| C[üìä Generate Report]" >> $GITHUB_STEP_SUMMARY
          echo "    B -->|No| D[‚è≠Ô∏è Skip All Workflows]" >> $GITHUB_STEP_SUMMARY
          echo "    C --> E[üê≥ Docker CI]" >> $GITHUB_STEP_SUMMARY
          echo "    C --> F[üìö Docs CI]" >> $GITHUB_STEP_SUMMARY
          echo "    E --> H[üêç Core CI]" >> $GITHUB_STEP_SUMMARY
          echo "    F --> I[‚úÖ All Complete]" >> $GITHUB_STEP_SUMMARY
          echo "    G --> I" >> $GITHUB_STEP_SUMMARY
          echo "    H --> I" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Change detection results
          echo "### üìä Detected Changes" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Workflow |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|----------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.detect.outputs.python_changed }}" = "true" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "| üêç Python Code | ‚úÖ Active | Core CI |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üêç Python Code | ‚è≠Ô∏è Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.detect.outputs.base_changed }}" = "true" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ steps.detect.outputs.services }}" != "[]" ]; then
            echo "| üê≥ Docker/Base | ‚úÖ Active | Docker CI |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üê≥ Docker/Base | ‚è≠Ô∏è Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.detect.outputs.docs_changed }}" = "true" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "| üìö Documentation | ‚úÖ Active | Docs CI |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üìö Documentation | ‚è≠Ô∏è Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi

  docker-ci:
    needs: ["changes"]
    if: |
      needs.changes.outputs.services != '[]' ||
      needs.changes.outputs.base_changed == 'true' ||
      needs.changes.outputs.run_docker_on_workflow_change == 'true' ||
      github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/docker-ci.yaml
    with:
      services: ${{ (needs.changes.outputs.base_changed == 'true' || needs.changes.outputs.run_docker_on_workflow_change == 'true' || github.event_name == 'workflow_dispatch') && '["guardrails","orchestrator","flan","audio","discord","stt","bark","testing","monitoring"]' || needs.changes.outputs.services }}
      rebuild-base: ${{ needs.changes.outputs.base_changed == 'true' }}

  core-ci:
    needs: ["changes", "docker-ci"]
    if: |
      needs.changes.outputs.python_changed == 'true' ||
      needs.changes.outputs.run_core_on_workflow_change == 'true' ||
      github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/core-ci.yaml
    with:
      python-changes: ${{ needs.changes.outputs.python_changed == 'true' }}

  docs-ci:
    needs: ["changes"]
    if: needs.changes.outputs.docs_changed == 'true' || needs.changes.outputs.run_docs_on_workflow_change == 'true' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/docs-ci.yaml

  workflow-status:
    needs: ["core-ci", "docker-ci", "docs-ci"]
    if: ${{ !cancelled() }}
    runs-on: "ubuntu-latest"
    steps:
      - name: "Report workflow status"
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const results = {
              'Core CI': '${{ needs.core-ci.result }}',
              'Docker CI': '${{ needs.docker-ci.result }}',
              'Docs CI': '${{ needs.docs-ci.result }}',
            };

            let report = `## üìä Workflow Status Summary\n\n`;
            report += `| Workflow | Status | Duration |\n`;
            report += `|----------|--------|----------|\n`;

            for (const [workflow, result] of Object.entries(results)) {
              const icon = result === 'success' ? '‚úÖ' :
                          result === 'failure' ? '‚ùå' :
                          result === 'skipped' ? '‚è≠Ô∏è' : '‚ö†Ô∏è';
              report += `| ${workflow} | ${icon} ${result} | - |\n`;
            }

            report += `\n### Build Information\n`;
            report += `- **Trigger**: ${{ github.event_name }}\n`;
            report += `- **Branch**: ${{ github.ref_name }}\n`;
            report += `- **Commit**: ${{ github.sha }}\n`;
            report += `- **Actor**: ${{ github.actor }}\n`;

            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, report);
