# Workflow: Main CI (Orchestrator)
# Purpose: Orchestrate change detection and route to specialized workflows
name: "Main CI"
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: "read"
  pull-requests: "read"
  packages: "write"

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  changes:
    name: "Detect affected areas"
    runs-on: "ubuntu-latest"
    environment: "discord-voice-lab"
    outputs:
      services: "${{ steps.detect.outputs.services }}"
      base_changed: "${{ steps.detect.outputs.base_changed }}"
      python_changed: "${{ steps.detect.outputs.python_changed }}"
      docs_changed: "${{ steps.detect.outputs.docs_changed }}"
      run_core_on_workflow_change: "${{ steps.detect.outputs.run_core_on_workflow_change }}"
      run_docker_on_workflow_change: "${{ steps.detect.outputs.run_docker_on_workflow_change }}"
      run_docs_on_workflow_change: "${{ steps.detect.outputs.run_docs_on_workflow_change }}"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
        with:
          fetch-depth: 0
      - name: "Detect changes"
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="${{ github.base_ref }}"
            git fetch origin "$base_ref":"refs/remotes/origin/$base_ref" --depth=1
            DIFF_RANGE="origin/$base_ref...HEAD"
          else
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              DIFF_RANGE="HEAD^...HEAD"
            else
              first_commit=$(git rev-list --max-parents=0 HEAD | tail -n1)
              DIFF_RANGE="$first_commit...HEAD"
            fi
          fi

          files=$(git diff --name-only $DIFF_RANGE || true)

          python_changed=false
          docs_changed=false
          base_changed=false

          run_core=false
          run_docker=false
          run_docs=false

          services_set=()

          while IFS= read -r f; do
            [ -z "$f" ] && continue

            case "$f" in
              services/*/*.py|*.py) python_changed=true ;;
            esac

            case "$f" in
              docs/*|README.md|AGENTS.md) docs_changed=true ;;
            esac

            case "$f" in
              services/base/*|requirements-base.txt) base_changed=true ;;
            esac

            if [[ "$f" =~ ^services/([^/]+)/ ]]; then
              svc="${BASH_REMATCH[1]}"
              case "$svc" in
                guardrails|orchestrator|flan|audio|discord|stt|bark|testing|monitoring)
                  services_set+=("$svc") ;;
              esac
            fi

            case "$f" in
              .github/workflows/core-ci.yaml) run_core=true ;;
              .github/workflows/docker-ci.yaml) run_docker=true ;;
              .github/workflows/docs-ci.yaml) run_docs=true ;;
            esac
          done <<< "$files"

          if [ ${#services_set[@]} -gt 0 ]; then
            mapfile -t uniq < <(printf '%s\n' "${services_set[@]}" | sort -u)
            services_json=$(python3 -c 'import json,sys; print(json.dumps(sys.argv[1].split()))' "${uniq[*]}")
          else
            services_json='[]'
          fi

          echo "services=$services_json" >> "$GITHUB_OUTPUT"
          echo "base_changed=$base_changed" >> "$GITHUB_OUTPUT"
          echo "python_changed=$python_changed" >> "$GITHUB_OUTPUT"
          echo "docs_changed=$docs_changed" >> "$GITHUB_OUTPUT"
          echo "run_core_on_workflow_change=$run_core" >> "$GITHUB_OUTPUT"
          echo "run_docker_on_workflow_change=$run_docker" >> "$GITHUB_OUTPUT"
          echo "run_docs_on_workflow_change=$run_docs" >> "$GITHUB_OUTPUT"

  docker-ci:
    needs: ["changes"]
    if: |
      needs.changes.outputs.services != '[]' ||
      needs.changes.outputs.base_changed == 'true' ||
      needs.changes.outputs.run_docker_on_workflow_change == 'true' ||
      github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/docker-ci.yaml
    with:
      services: ${{ (needs.changes.outputs.base_changed == 'true' || needs.changes.outputs.run_docker_on_workflow_change == 'true' || github.event_name == 'workflow_dispatch') && '["guardrails","orchestrator","flan","audio","discord","stt","bark","testing","monitoring"]' || needs.changes.outputs.services }}
      rebuild-base: ${{ needs.changes.outputs.base_changed == 'true' }}

  core-ci:
    needs: ["changes", "docker-ci"]
    if: |
      needs.changes.outputs.python_changed == 'true' ||
      needs.changes.outputs.run_core_on_workflow_change == 'true' ||
      github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/core-ci.yaml
    with:
      python-changes: ${{ needs.changes.outputs.python_changed == 'true' }}

  docs-ci:
    needs: ["changes"]
    if: needs.changes.outputs.docs_changed == 'true' || needs.changes.outputs.run_docs_on_workflow_change == 'true' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/docs-ci.yaml

  aggregate-ci:
    needs: ["core-ci", "docker-ci", "docs-ci"]
    if: ${{ !cancelled() }}
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Download CI reports"
        uses: actions/download-artifact@v4
        with:
          pattern: ci-report-*.json
          merge-multiple: true
      - name: "Merge CI reports to ci-summary.json"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ci
          ls -1 ci-report-*.json >/dev/null 2>&1 || { echo "[]" > ci/ci-summary.json; exit 0; }
          echo "[" > ci/ci-summary.json
          first=true
          for f in ci-report-*.json; do
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> ci/ci-summary.json
            fi
            cat "$f" >> ci/ci-summary.json
          done
          echo "]" >> ci/ci-summary.json
      - name: "Upload CI summary"
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary.json
          path: ci/ci-summary.json
          retention-days: 7

  comment-ci:
    needs: ["aggregate-ci"]
    if: github.event_name == 'pull_request' && !cancelled()
    runs-on: "ubuntu-latest"
    timeout-minutes: 3
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: "Download CI summary"
        uses: actions/download-artifact@v4
        with:
          name: ci-summary.json
          path: ci
      - name: "Render PR comment body"
        id: render
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = '### CI Summary\n\n| Workflow | Status |\n|----------|--------|\n';
            let data = [];
            try {
              data = JSON.parse(fs.readFileSync('ci/ci-summary.json', 'utf8'));
            } catch (e) {
              core.setOutput('body', 'CI summary artifact missing');
              return;
            }
            const icon = (s) => s === 'success' ? '✅' : (s === 'failure' ? '❌' : (s === 'skipped' ? '⏭️' : '⚠️'));
            for (const item of data) {
              body += `| ${item.workflow || '?'} | ${icon(item.status)} ${item.status} |\n`;
            }
            core.setOutput('body', body);
      - name: "Create or update PR comment"
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.render.outputs.body }}
          edit-mode: replace
