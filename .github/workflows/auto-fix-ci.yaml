# Workflow: Auto-Fix CI Failures (Enhanced)
# Purpose: Enhanced auto-fix with workflow-specific analysis for the new multi-workflow architecture
name: 'Auto-Fix CI Failures'

on:
  workflow_run:
    workflows: ['Main CI', 'Core CI', 'Docker CI', 'Documentation CI', 'Security CI']
    types: ['completed']
    branches: ['**']

permissions:
  actions: 'read'
  contents: 'write'
  pull-requests: 'write'
  statuses: 'write'

concurrency:
  group: 'auto-fix-${{ github.event.workflow_run.id }}'
  cancel-in-progress: false

jobs:
  analyze_failure:
    # Only run this job when the monitored workflow *failed*
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    environment: discord-voice-lab

    env:
      TARGET_REPO: '${{ github.event.workflow_run.repository.full_name }}'
      TARGET_SHA: '${{ github.event.workflow_run.head_sha }}'
      TARGET_BRANCH: '${{ github.event.workflow_run.head_branch }}'
      RUN_ID: '${{ github.event.workflow_run.id }}'
      RUN_URL: '${{ github.event.workflow_run.html_url }}'
      WORKFLOW_NAME: '${{ github.event.workflow_run.name }}'
      STATUS_CONTEXT: 'Auto-Fix CI Failures'
      GH_TOKEN: '${{ github.token }}'
      CURSOR_API_KEY: '${{ secrets.CURSOR_API_KEY }}'

    steps:
      # 1) Show triggering context in the logs
      - name: 'Show triggering context'
        run: |
          echo 'Triggered by failed run:'
          echo '  repo:        $TARGET_REPO'
          echo '  branch:      $TARGET_BRANCH'
          echo '  head sha:    $TARGET_SHA'
          echo '  run id/url:  $RUN_ID / $RUN_URL'
          echo '  workflow:    $WORKFLOW_NAME'

      # 2) Check out the failing commit (PR branch)
      - name: 'Check out failing commit (PR branch)'
        uses: 'actions/checkout@v4'
        with:
          repository: '${{ env.TARGET_REPO }}'
          ref: '${{ env.TARGET_SHA }}'
          fetch-depth: 0

      # 3) Determine the PR number and ref (if CI came from a PR)
      - name: 'Determine PR number (if CI came from a PR)'
        id: 'pr'
        uses: 'actions/github-script@v7'
        with:
          script: |
            const prs = (context.payload.workflow_run.pull_requests || []);
            core.setOutput('number', prs[0]?.number || '');
            core.setOutput('ref', prs[0]?.head?.ref || '');
            core.info(`Resolved PR number: ${prs[0]?.number || '(none)'}`);

      # 4) Ensure GitHub CLI is available & authenticated
      - name: 'Verify gh availability & auth'
        run: |
          set -euo pipefail
          gh --version || { echo 'gh CLI not found'; exit 1; }
          gh auth status || { echo 'gh auth failed'; exit 1; }
          gh auth setup-git

      # 5) Create initial pending status on the failing commit
      - name: 'Status → Starting analysis'
        run: |
          set -euo pipefail
          gh api \
            --method POST \
            repos/${{ env.TARGET_REPO }}/statuses/${{ env.TARGET_SHA }} \
            -f state='pending' \
            -f target_url='${{ env.RUN_URL }}' \
            -f description='Auto-Fix CI: Starting analysis…' \
            -f context='${{ env.STATUS_CONTEXT }}' || echo 'WARN: status POST failed'

      # 6) Install Cursor CLI (retry; add to PATH)
      - name: 'Install Cursor CLI'
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo 'Installing Cursor CLI (attempt $attempt/3)…'
            if curl -fsS https://cursor.com/install | bash; then
              break
            fi
            [ '$attempt' = '3' ] && { echo 'Cursor install failed'; exit 1; }
            sleep 5
          done

          if [ -f '$HOME/.local/bin/cursor-agent' ]; then
            echo '$HOME/.local/bin' >> '$GITHUB_PATH'
          else
            echo 'ERROR: cursor-agent not found after install'
            exit 1
          fi

          cursor-agent --version

      # 7) Configure git identity for any branch commits the agent may perform
      - name: 'Configure git identity'
        run: |
          set -euo pipefail
          git config user.name  'Cursor Agent'
          git config user.email 'gpreston@gmail.com'
          git status >/dev/null

      # 8) Move status forward (environment is ready; analysis begins)
      - name: 'Status → Environment ready'
        run: |
          set -euo pipefail
          gh api \
            --method POST \
            repos/${{ env.TARGET_REPO }}/statuses/${{ env.TARGET_SHA }} \
            -f state='pending' \
            -f target_url='${{ env.RUN_URL }}' \
            -f description='Auto-Fix CI: Environment ready, starting analysis…' \
            -f context='${{ env.STATUS_CONTEXT }}' || echo 'WARN: status POST failed'

      # --- Enhanced Analysis and Fix Implementation ---
      # 9) Run the Cursor Agent with workflow-specific analysis
      - name: 'Run Cursor Agent to analyze failure'
        env:
          MODEL: 'gpt-5'
          BRANCH_PREFIX: 'ci-fix'
        run: |
          set -euo pipefail
          echo 'Starting failure analysis with Cursor Agent…'
          cursor-agent -p '
            You are operating in a GitHub Actions runner.
            The GitHub CLI (\'gh\') is authenticated and git is configured.

            Context:
            - Repo: ${{ env.TARGET_REPO }}
            - Head SHA: ${{ env.TARGET_SHA }}
            - Head Branch: ${{ env.TARGET_BRANCH }}
            - Workflow Run ID: ${{ env.RUN_ID }}
            - Workflow Run URL: ${{ env.RUN_URL }}
            - Failed Workflow: ${{ env.WORKFLOW_NAME }}
            - Fix Branch Prefix: ${BRANCH_PREFIX}

            Workflow-specific analysis:
            - Core CI failures: Focus on Python linting (ruff, mypy), unit tests, component tests. Use \'make lint-fix\' for auto-fixes.
            - Docker CI failures: Focus on Dockerfile syntax, base image builds, integration tests, docker-compose issues. Check environment files.
            - Docs CI failures: Focus on documentation validation, markdown linting, metadata checks.
            - Security CI failures: Focus on dependency vulnerabilities, secrets detection, security scanning results.
            - Main CI failures: Analyze orchestration issues, workflow routing, change detection logic.

            Goal:
            - Analyze failure logs for the run above with workflow-specific context.
            - Identify root cause(s) and validate against the codebase.
            - Maintain a persistent fix branch for the PR head using the branch prefix.
            - Push minimal, targeted changes aligned with existing style.
            - DO NOT create PRs; instead, post/update a concise PR comment with the fix summary (3-4 sentences) and a compare link to quick-create a PR.
            - If no actionable fix, make no changes and leave an explanation comment.

            Available tools:
            - gh api / gh run view / gh run download / gh pr view / gh pr list / gh pr diff
            - git (commits/push to the fix branch)
            - make test / make lint / make lint-fix / make test-unit / make test-component / make test-integration
            - docker-compose commands (for Docker-related failures)
            - python scripts/prepare_env_files.py --force (for environment setup issues)
          ' --model '$MODEL' --output-format=text --force

      # 10) Mark success when the agent finishes
      - name: 'Status → Analysis completed'
        if: 'success()'
        run: |
          set -euo pipefail
          gh api \
            --method POST \
            repos/${{ env.TARGET_REPO }}/statuses/${{ env.TARGET_SHA }} \
            -f state='success' \
            -f target_url='${{ env.RUN_URL }}' \
            -f description='Auto-Fix CI: Analysis completed — see PR comments for details' \
            -f context='${{ env.STATUS_CONTEXT }}' || echo 'WARN: status POST failed'

      # 11) Always set a final terminal status reflecting the job result
      - name: 'Status → Final'
        if: 'always()'
        run: |
          set -euo pipefail
          if [ '${{ job.status }}' = 'success' ]; then
            STATE='success'
            DESC='Auto-Fix CI: Completed successfully'
          else
            STATE='failure'
            DESC='Auto-Fix CI: Analysis failed — see workflow logs'
          fi

          gh api \
            --method POST \
            repos/${{ env.TARGET_REPO }}/statuses/${{ env.TARGET_SHA }} \
            -f state='$STATE' \
            -f target_url='${{ env.RUN_URL }}' \
            -f description='$DESC' \
            -f context='${{ env.STATUS_CONTEXT }}' || echo 'WARN: final status POST failed'
