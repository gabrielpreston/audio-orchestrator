# Workflow: Auto-Analyze CI Failures using Cursor Agent
# Purpose: When CI fails, run an AI-assisted analysis and propose fixes.

name: Auto-Analyze CI Failures

on:
  workflow_run:
    workflows: ["CI"]         # Monitors your primary CI workflow
    types: [completed]

permissions:
  actions: read
  contents: write
  pull-requests: write
  statuses: write

concurrency:
  group: auto-analyze-${{ github.event.workflow_run.id }}
  cancel-in-progress: false

jobs:
  analyze-failure:
    # Only run when the upstream CI failed, avoid self-trigger loops, and ignore cross-repo runs
    if: >
      ${{
        github.event.workflow_run.conclusion == 'failure' &&
        github.event.workflow_run.name != 'Auto-Analyze CI Failures' &&
        github.event.workflow_run.head_repository.full_name == github.repository
      }}
    runs-on: ubuntu-latest
    environment: discord-voice-lab

    # Make all later steps easy to read by defining shared context up-front
    env:
      REPO: ${{ github.repository }}
      OWNER: ${{ github.repository_owner }}
      RUN_ID: ${{ github.event.workflow_run.id }}
      RUN_URL: ${{ github.event.workflow_run.html_url }}
      COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
      HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
      STATUS_CONTEXT: auto-fix-ci/analysis

    steps:
      # 0) Choose token source BEFORE any 'gh' calls (keeps forks/ext repos flexible)
      - name: Select token source
        id: tok
        run: |
          # Default to the ephemeral workflow token.
          echo "value=${GITHUB_TOKEN}" >> "$GITHUB_OUTPUT"
        env:
          # Swap to a PAT (with repo + statuses scope) if you need to support fork PRs:
          # GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ github.token }}

      # 1) Establish repo context for diffs/branches (fetch-depth=0)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Ensure GitHub CLI is available & authenticated
      - name: Verify gh availability & auth
        env:
          GH_TOKEN: ${{ steps.tok.outputs.value }}
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          gh --version || { echo "gh CLI not found"; exit 1; }
          gh auth status || { echo "gh auth failed"; exit 1; }
          gh auth setup-git

      # 3) Create initial pending status on the failing commit
      - name: Status → Starting analysis
        env:
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          gh api \
            --method POST \
            repos/${{ env.REPO }}/statuses/${{ env.COMMIT_SHA }} \
            -f state="pending" \
            -f target_url="${{ env.RUN_URL }}" \
            -f description="Auto-Fix CI: Starting analysis…" \
            -f context="${{ env.STATUS_CONTEXT }}" || echo "WARN: status POST failed"

      # 4) Install Cursor CLI (retry; add to PATH)
      - name: Install Cursor CLI
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "Installing Cursor CLI (attempt $attempt/3)…"
            if curl -fsS https://cursor.com/install | bash; then
              break
            fi
            [ "$attempt" = "3" ] && { echo "Cursor install failed"; exit 1; }
            sleep 5
          done

          if [ -f "$HOME/.local/bin/cursor-agent" ]; then
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          else
            echo "ERROR: cursor-agent not found after install"
            exit 1
          fi

          cursor-agent --version

      # 5) Configure git identity for any branch commits the agent may perform
      - name: Configure git identity
        run: |
          set -euo pipefail
          git config user.name  "Cursor Agent"
          git config user.email "gpreston@gmail.com"
          git status >/dev/null

      # 6) Sanity checks: API access, run visibility, repo info
      - name: Verify API access & repo state
        env:
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          gh api repos/${{ env.REPO }} >/dev/null
          gh api repos/${{ env.REPO }}/actions/runs/${{ env.RUN_ID }} >/dev/null
          git remote -v
          gh repo view --json name,defaultBranchRef

      # 7) Move status forward (environment is ready; analysis begins)
      - name: Status → Environment ready
        env:
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          gh api \
            --method POST \
            repos/${{ env.REPO }}/statuses/${{ env.COMMIT_SHA }} \
            -f state="pending" \
            -f target_url="${{ env.RUN_URL }}" \
            -f description="Auto-Fix CI: Environment ready, starting analysis…" \
            -f context="${{ env.STATUS_CONTEXT }}" || echo "WARN: status POST failed"

      # 8) Run the Cursor Agent to analyze the failing run and propose/apply a fix branch
      - name: Run Cursor Agent to analyze failure
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
          GH_TOKEN: ${{ steps.tok.outputs.value }}
          MODEL: gpt-5
          BRANCH_PREFIX: ci-fix
        run: |
          set -euo pipefail
          echo "Starting failure analysis with Cursor Agent…"
          cursor-agent -p "
            You are operating in a GitHub Actions runner.
            The GitHub CLI ('gh') is authenticated and git is configured.

            Context:
            - Repo: ${{ env.REPO }}
            - Owner: ${{ env.OWNER }}
            - Workflow Run ID: ${{ env.RUN_ID }}
            - Workflow Run URL: ${{ env.RUN_URL }}
            - Fix Branch Prefix: ${BRANCH_PREFIX}

            Goal:
            - Analyze failure logs for the run above.
            - Identify root cause(s) and validate against the codebase.
            - Maintain a persistent fix branch for the PR head using the prefix.
            - Push minimal, targeted changes aligned with existing style.
            - DO NOT create PRs; instead, post/update a concise PR comment with the fix summary and a compare link to quick-create a PR.
            - If no actionable fix, make no changes and leave an explanation comment.

            Inputs & tools available:
            - gh api / gh run view / gh run download / gh pr view / gh pr list / gh pr diff
            - git (commits/push to the fix branch)
          " --model "$MODEL" --output-format=text --force

      # 9) Mark success when the agent finishes
      - name: Status → Analysis completed
        if: success()
        env:
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          gh api \
            --method POST \
            repos/${{ env.REPO }}/statuses/${{ env.COMMIT_SHA }} \
            -f state="success" \
            -f target_url="${{ env.RUN_URL }}" \
            -f description="Auto-Fix CI: Analysis completed — see PR comments for details" \
            -f context="${{ env.STATUS_CONTEXT }}" || echo "WARN: status POST failed"

      # 10) Always set a final terminal status reflecting the job result
      - name: Status → Final
        if: always()
        env:
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          if [ "${{ job.status }}" = "success" ]; then
            STATE="success"
            DESC="Auto-Fix CI: Completed successfully"
          else
            STATE="failure"
            DESC="Auto-Fix CI: Analysis failed — see workflow logs"
          fi

          gh api \
            --method POST \
            repos/${{ env.REPO }}/statuses/${{ env.COMMIT_SHA }} \
            -f state="$STATE" \
            -f target_url="${{ env.RUN_URL }}" \
            -f description="$DESC" \
            -f context="${{ env.STATUS_CONTEXT }}" || echo "WARN: final status POST failed"
