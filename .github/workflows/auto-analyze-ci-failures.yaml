# Workflow: Auto-Analyze CI Failures using Cursor Agent
# Purpose: Automatically run AI-assisted root-cause analysis & propose fixes when CI fails.
name: Auto-Analyze CI Failures

on:
  workflow_run:
    workflows: [ CI ]  # Triggers on the existing CI workflow
    types: [ completed ]

jobs:
  analyze-failure:
    # Only run if the upstream CI failed, and skip self-trigger loops
    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.name != 'Auto-Analyze CI Failures' }}
    runs-on: ubuntu-latest
    environment: discord-voice-lab
    
    permissions:
      actions: read
      contents: write
      pull-requests: write
      statuses: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # full history needed for branch context / diffs

      - name: Install Cursor CLI
        run: |
          set -euo pipefail
          echo "Installing Cursor CLI..."
          
          # Download and install Cursor CLI with retry logic
          for attempt in {1..3}; do
            echo "Attempt $attempt/3: Installing Cursor CLI"
            if curl -fsS https://cursor.com/install | bash; then
              echo "Cursor CLI installation successful"
              break
            else
              echo "Cursor CLI installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All installation attempts failed"
                exit 1
              fi
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          # Verify installation and add to PATH
          if [ -f "$HOME/.local/bin/cursor-agent" ]; then
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
            echo "Cursor CLI added to PATH"
          else
            echo "ERROR: Cursor CLI not found after installation"
            exit 1
          fi
          
          # Verify cursor-agent command works
          export PATH="$HOME/.local/bin:$PATH"
          cursor-agent --version || {
            echo "ERROR: Cursor CLI not working after installation"
            exit 1
          }

      - name: Install GitHub CLI
        run: |
          set -euo pipefail
          echo "Installing GitHub CLI..."
          
          # Update package lists with retry logic
          for attempt in {1..3}; do
            echo "Attempt $attempt/3: Updating package lists"
            if sudo apt-get update; then
              echo "Package lists updated successfully"
              break
            else
              echo "Package update failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All package update attempts failed"
                exit 1
              fi
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          # Install GitHub CLI with retry logic
          for attempt in {1..3}; do
            echo "Attempt $attempt/3: Installing GitHub CLI"
            if sudo apt-get install -y gh; then
              echo "GitHub CLI installation successful"
              break
            else
              echo "GitHub CLI installation failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All GitHub CLI installation attempts failed"
                exit 1
              fi
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          # Verify installation
          gh --version || {
            echo "ERROR: GitHub CLI not working after installation"
            exit 1
          }
          echo "GitHub CLI installation verified"

      - name: Configure git identity
        run: |
          set -euo pipefail
          echo "Configuring git identity..."
          
          # Configure git user
          git config user.name "Cursor Agent" || {
            echo "ERROR: Failed to set git user.name"
            exit 1
          }
          
          git config user.email "gpreston@gmail.com" || {
            echo "ERROR: Failed to set git user.email"
            exit 1
          }
          
          # Verify configuration
          echo "Git configuration:"
          git config user.name
          git config user.email
          
          # Verify git is working
          git status || {
            echo "ERROR: Git not working properly"
            exit 1
          }
          echo "Git identity configuration verified"

      # If your CI is triggered by PRs from forks, the default GITHUB_TOKEN is limited.
      # Create a fine-grained PAT with repo permissions and store it as GH_PAT in repo secrets,
      # then switch the TOKEN_SOURCE below from github.token to secrets.GH_PAT.
      - name: Select token source
        id: tok
        run: |
          # Default: use the workflow's GITHUB_TOKEN
          echo "value=${GITHUB_TOKEN}" >> "$GITHUB_OUTPUT"
        env:
          # Use the built-in token by default
          GITHUB_TOKEN: ${{ github.token }}
          # To override (e.g., for forks), uncomment the next line and comment out the line above:
          # GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Verify gh auth
        env:
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          echo "Verifying GitHub CLI authentication..."
          
          # Check if token is set
          if [ -z "${GITHUB_TOKEN:-}" ]; then
            echo "ERROR: GITHUB_TOKEN is not set"
            exit 1
          fi
          
          # Verify gh auth status
          gh auth status || {
            echo "ERROR: GitHub CLI authentication failed"
            exit 1
          }
          
          # Setup git authentication
          gh auth setup-git || {
            echo "ERROR: Failed to setup git authentication"
            exit 1
          }
          
          echo "GitHub CLI authentication verified"

      - name: Verify API access and repo state
        env:
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
        run: |
          set -euo pipefail
          echo "Verifying API access and repository state..."
          
          # Check if token is set
          if [ -z "${GITHUB_TOKEN:-}" ]; then
            echo "ERROR: GITHUB_TOKEN is not set"
            exit 1
          fi
          
          # Verify repository API access
          echo "Testing repository API access..."
          gh api repos/${{ github.repository }} >/dev/null || {
            echo "ERROR: Failed to access repository API"
            exit 1
          }
          
          # Verify workflow run API access
          echo "Testing workflow run API access..."
          gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} >/dev/null || {
            echo "ERROR: Failed to access workflow run API"
            exit 1
          }
          
          # Verify git remote configuration
          echo "Checking git remote configuration..."
          git remote -v || {
            echo "ERROR: Failed to get git remote information"
            exit 1
          }
          
          # Verify repository information
          echo "Checking repository information..."
          gh repo view --json name,defaultBranchRef || {
            echo "ERROR: Failed to get repository information"
            exit 1
          }
          
          echo "API access and repository state verified"

      - name: Run Cursor Agent to analyze failure
        env:
          # Cursor key from repo/environment secrets
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}

          # Expose BOTH variable names in case the agent/CLI checks one or the other
          GITHUB_TOKEN: ${{ steps.tok.outputs.value }}
          GH_TOKEN: ${{ steps.tok.outputs.value }}

          # Agent settings
          MODEL: gpt-5
          BRANCH_PREFIX: ci-fix
        run: |
          # Run the analysis with error handling
          echo "Starting failure analysis..."
          cursor-agent -p "
            You are operating in a GitHub Actions runner.

            The GitHub CLI is available as \`gh\` and already authenticated. It has been tested and validated earlier in the workflow.Git is available. You have write access to repository contents and can comment on pull requests, but you must not create nor edit PRs directly.

            Context:
            - Repo: ${{ github.repository }}
            - Owner: ${{ github.repository_owner }}
            - Workflow Run ID: ${{ github.event.workflow_run.id }}
            - Workflow Run URL: ${{ github.event.workflow_run.html_url }}
            - Fix Branch Prefix: ${BRANCH_PREFIX}

            Goal:
            - Analyze the failure logs for the workflow run (ID above).
            - Identify likely root cause(s) specific to this failure.
            - Maintain a persistent fix branch for this PR head using the Fix Branch Prefix from Context. Create it if missing, update it otherwise, and push changes to origin.
            - Propose minimal targeted changes consistent with existing code style to fix the failure back into the original PR's branch.
            - Make edits, commit, push in that branch.
            - Ensure all changes meet expected quality standards (e.g. linting, formatting, etc.).
            - You do NOT have permission to create PRs. Instead, post or update a single natural-language PR comment (1â€“2 sentences) that briefly explains the CI fix and includes an inline compare link to quick-create a PR.

            Inputs and conventions:
            - Use \`gh api\`, \`gh run view\`, \`gh pr view\`, \`gh pr diff\`, \`gh pr list\`, \`gh run download\`, and git commands as needed to discover the failing PR and branches.
            - Avoid duplicate comments; if a previous bot comment exists, update it instead of posting a new one.
            - If no actionable fix is possible, make no changes and post no comment.
          " --model "$MODEL" --output-format=text --force || {
            echo "ERROR: Cursor Agent analysis failed"
            exit 1
          }
          
          echo "Cursor Agent analysis completed successfully"