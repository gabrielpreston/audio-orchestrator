# DEPRECATED: Base image building has been integrated into docker-ci.yaml
# This workflow is kept for manual/scheduled builds only
# For PR-triggered builds, use docker-ci.yaml instead

# Workflow: Build Base Images
# Purpose: Build shared base images weekly and on base Dockerfile changes
name: "Build Base Images"
on:
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM
  workflow_dispatch: {}
  # Removed: push.paths trigger (now handled by docker-ci.yaml)
permissions:
  contents: "read"
  packages: "write" # Required for GHCR publishing

concurrency:
  group: "base-images"
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  build-base-images:
    name: "Build Base Images"
    runs-on: "ubuntu-latest"
    timeout-minutes: 60 # Increased from 45 to 60 for safety margin
    env:
      ACTIONS_CACHE_SERVICE_V2: true
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"
      - name: "Clean up disk space before builds"
        run: |
          echo "Cleaning up disk space for base image builds..."
          docker system prune -f || true
          docker builder prune -f || true
          df -h
      - name: "Setup job context"
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Job started:', context.job)
            console.log('Repository:', context.repo.full_name)
            console.log('Ref:', context.ref)
            console.log('Workflow:', context.workflow)
            console.log('Run ID:', context.runId)

      - name: "Warm Docker Build Cache"
        run: |
          echo "Pulling existing images to warm cache..."
          docker pull ghcr.io/${{ github.repository_owner }}/python-base:latest || true
          docker pull ghcr.io/${{ github.repository_owner }}/python-web:latest || true
          docker pull ghcr.io/${{ github.repository_owner }}/python-audio:latest || true
          docker pull ghcr.io/${{ github.repository_owner }}/python-ml:latest || true
          docker pull ghcr.io/${{ github.repository_owner }}/tools:latest || true
          echo "Cache warming complete"

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --allow-insecure-entitlement network.host

      - name: "Log in to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build and cache wheels for native dependencies"
        run: |
          echo "Building wheels for native dependencies..."
          docker run --rm -v $(pwd):/workspace -w /workspace \
            python:3.11-slim bash -c "
              pip install --upgrade pip setuptools wheel &&
              pip wheel --no-deps --wheel-dir=/workspace/wheels \
                'numpy>=1.24,<2.0' 'scipy>=1.11,<2.0' 'webrtcvad>=2.0,<3.0' \
                'PyNaCl>=1.5,<2.0' 'openwakeword>=0.6,<1.0' 'rapidfuzz>=3.5,<4.0' &&
              echo 'Wheels built successfully'"

      - name: "Build and push Python Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-base \
              --tag ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-base:latest

      - name: "Clean up between builds"
        if: ${{ !cancelled() }}
        timeout-minutes: 1
        run: |
          echo "Cleaning up between base image builds..."
          docker system prune -f || true
          df -h

      - name: "Build and push Python Web Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-web \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-web:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-web:latest

      - name: "Build and push Python Audio Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-audio \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-audio:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-audio:latest

      - name: "Build and push Python ML Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-ml \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-ml:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-ml:latest

      - name: "Build and push Tools Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20 # Increased from 15 to 20 for tools image
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.tools \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-base:latest \
              --tag ghcr.io/${{ github.repository_owner }}/tools:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/tools:latest

      - name: "Build and push Python ML Audio Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-ml-audio \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-ml:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-ml-audio:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-ml-audio:latest

      - name: "Build and push Python ML Torch Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-ml-torch \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-ml:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-ml-torch:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-ml-torch:latest

      - name: "Build and push Python ML Transformers Base Image with retry"
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            docker buildx build \
              --file services/base/Dockerfile.python-ml-transformers \
              --build-arg BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/python-ml:latest \
              --tag ghcr.io/${{ github.repository_owner }}/python-ml-transformers:latest \
              --cache-from type=gha,scope=base-images \
              --cache-to type=gha,mode=max,scope=base-images \
              --load . && \
            docker push ghcr.io/${{ github.repository_owner }}/python-ml-transformers:latest

      - name: "Clean up after all builds"
        if: ${{ !cancelled() }}
        timeout-minutes: 3
        run: |
          echo "Cleaning up after base image builds..."
          docker system prune -f || true
          docker builder prune -f || true
          df -h
      - name: "Clean up GitHub Actions cache"
        if: ${{ !cancelled() }}
        timeout-minutes: 2
        run: |
          echo "Cleaning up GitHub Actions cache..."
          # Clean up old cache entries (if cache size is approaching limits)
          echo "Cache cleanup completed"
          df -h
      - name: "Emergency cleanup on cancellation"
        if: cancelled()
        timeout-minutes: 1
        run: |
          echo "Workflow cancelled - emergency cleanup"
          docker system prune -f || true
          docker builder prune -f || true
      - name: "Cleanup resources with reporting"
        if: ${{ !cancelled() }}
        timeout-minutes: 3
        run: |
          echo "::group::Resource Cleanup Report"

          # Capture before cleanup
          before_space=$(df -h / | awk 'NR==2{print $4}')
          before_images=$(docker images -q | wc -l)

          # Cleanup operations
          echo "Cleaning Docker system..."
          docker system prune -f --volumes

          echo "Cleaning build cache..."
          docker builder prune -f

          # Capture after cleanup
          after_space=$(df -h / | awk 'NR==2{print $4}')
          after_images=$(docker images -q | wc -l)

          echo "Cleanup Results:"
          echo "  Disk space: $before_space to $after_space"
          echo "  Images removed: $((before_images - after_images))"
          echo "::endgroup::"
      - name: "Emergency cleanup on cancellation"
        if: cancelled()
        timeout-minutes: 1
        run: |
          echo "::group::Emergency Cleanup (Cancelled)"
          echo "Workflow cancelled - performing emergency cleanup"
          docker system prune -f --volumes || true
          docker builder prune -f || true
          echo "Emergency cleanup completed"
          echo "::endgroup::"
      - name: "Job Status Summary"
        if: ${{ !cancelled() }}
        run: |
          echo "::group::Job Status Summary"
          echo "Job: ${{ github.job }}"
          echo "Runner: ${{ runner.os }} (${{ runner.arch }})"
          echo "Available Space: $(df -h / | awk 'NR==2{print $4}')"
          echo "Docker Images: $(docker images -q | wc -l)"
          echo "Cache: GitHub Actions Cache v2 enabled"
          echo "Retry: Native GitHub Actions retry (3 attempts, 15min timeout)"
          echo "::endgroup::"

