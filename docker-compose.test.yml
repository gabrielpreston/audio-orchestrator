# Test-specific Docker Compose configuration
# Optimized for integration testing with fast startup and isolated network
version: '3.8'

networks:
  test-network:
    driver: bridge
    name: audio-orchestrator-test

services:
  stt:
    extends:
      file: docker-compose.yml
      service: stt
    networks:
      - test-network
    environment:
      - FW_MODEL=tiny  # Fast model for tests
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "python", "/app/scripts/health_check.py", "http://localhost:9000/health/ready", "--timeout", "3"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - ./services/tests/fixtures:/app/test-fixtures:ro

  tts:
    extends:
      file: docker-compose.yml
      service: tts
    networks:
      - test-network
    environment:
      - LOG_LEVEL=INFO
      - TTS_AUTH_TOKEN=test-token
    healthcheck:
      test: ["CMD", "python", "/app/scripts/health_check.py", "http://localhost:7000/health/ready", "--timeout", "3"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - ./services/tests/fixtures:/app/test-fixtures:ro

  llm:
    extends:
      file: docker-compose.yml
      service: llm
    networks:
      - test-network
    environment:
      - LOG_LEVEL=INFO
      - LLM_AUTH_TOKEN=test-token
    healthcheck:
      test: ["CMD", "python", "/app/scripts/health_check.py", "http://localhost:8000/health/ready", "--timeout", "3"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  orchestrator:
    build:
      context: '.'
      dockerfile: 'services/orchestrator/Dockerfile'
    networks:
      - test-network
    environment:
      - LOG_LEVEL=INFO
      - LLM_AUTH_TOKEN=test-token
      - TTS_AUTH_TOKEN=test-token
    healthcheck:
      test: ["CMD", "python", "/app/scripts/health_check.py", "http://localhost:8000/health/ready", "--timeout", "3"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    depends_on:
      llm:
        condition: service_healthy
      tts:
        condition: service_healthy

  # Discord service for E2E tests (optional, requires token)
  discord:
    build:
      context: .
      dockerfile: services/discord/Dockerfile
    networks:
      - test-network
    ports:
      - "8001:8001"  # Discord HTTP API port
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN:-dummy-token-for-testing}
      - DISCORD_FULL_BOT=false  # HTTP mode by default (correct env var name)
      - DISCORD_GUILD_ID=123456789
      - DISCORD_VOICE_CHANNEL_ID=987654321
      - STT_BASE_URL=http://stt:9000
      - ORCHESTRATOR_BASE_URL=http://orchestrator:8000
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "python", "/app/scripts/health_check.py", "http://localhost:8001/health/ready", "--timeout", "3"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    depends_on:
      stt:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
