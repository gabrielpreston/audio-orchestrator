"""Configuration system protocols for audio-orchestrator.

This module defines protocol-based interfaces for configuration management,
replacing Abstract Base Classes with focused, composable protocols.
"""

from typing import Protocol, Any


class ConfigurationSourceProtocol(Protocol):
    """Protocol for configuration sources."""

    def load(self) -> dict[str, Any]: ...
    def save(self, config: dict[str, Any]) -> None: ...
    def validate(self) -> bool: ...


class ConfigurationValidatorProtocol(Protocol):
    """Protocol for configuration validation."""

    def validate(self, config: dict[str, Any]) -> list[str]: ...
    def get_schema(self) -> dict[str, Any]: ...
    def validate_field(self, field: str, value: Any) -> bool: ...


class ServiceConfigurationProtocol(Protocol):
    """Protocol for service-specific configuration."""

    def get_service_config(self, service: str) -> dict[str, Any]: ...
    def validate_service_config(self, service: str) -> bool: ...
    def update_service_config(self, service: str, config: dict[str, Any]) -> None: ...


class ConfigurationManagerProtocol(Protocol):
    """Protocol for configuration management."""

    def get_config(self, key: str, default: Any = None) -> Any: ...
    def set_config(self, key: str, value: Any) -> None: ...
    def reload_config(self) -> None: ...
    def get_all_configs(self) -> dict[str, Any]: ...
