#!/usr/bin/env python3
"""
CI Environment Configuration Script

This script sets up optimized environment variables for CI testing,
including lighter models and faster configurations.
"""

import os
import sys
from pathlib import Path


def setup_ci_environment():
    """Set up CI-optimized environment variables."""

    # CI-specific model configurations for faster testing
    ci_env_vars = {
        # STT Configuration - Use tiny model for faster startup
        "FW_MODEL": "tiny",
        "STT_MODEL_SIZE": "tiny",

        # TTS Configuration - Use small models
        "BARK_USE_SMALL_MODELS": "true",
        "TTS_MODEL_SIZE": "small",

        # LLM Configuration - Use smaller model
        "LLM_MODEL_SIZE": "small",
        "FLAN_MODEL_SIZE": "small",

        # Audio Processing - Faster processing
        "AUDIO_PROCESSING_FAST_MODE": "true",
        "AUDIO_QUALITY_PRESET": "fast",

        # Health Check Configuration - Faster checks
        "HEALTH_CHECK_TIMEOUT": "3",
        "HEALTH_CHECK_INTERVAL": "3",

        # Logging - Reduce verbosity for CI
        "LOG_LEVEL": "WARNING",
        "LOG_FORMAT": "simple",

        # Performance - Optimize for CI
        "PYTHONUNBUFFERED": "1",
        "PYTHONDONTWRITEBYTECODE": "1",
        "PYTHONPATH": "/app",

        # Disable unnecessary features for CI
        "ENABLE_METRICS": "false",
        "ENABLE_TRACING": "false",
        "ENABLE_PROFILING": "false",

        # Memory optimization
        "PYTHONHASHSEED": "0",
        "MALLOC_TRIM_THRESHOLD_": "131072",
    }

    # Write CI environment file
    ci_env_file = Path(".env.ci")
    with open(ci_env_file, "w") as f:
        f.write("# CI-optimized environment configuration\n")
        f.write("# Generated by scripts/ci_env_config.py\n\n")

        for key, value in ci_env_vars.items():
            f.write(f"{key}={value}\n")

    print(f"✅ Created CI environment file: {ci_env_file}")
    print(f"   - STT Model: {ci_env_vars['FW_MODEL']}")
    print(f"   - TTS Models: {ci_env_vars['BARK_USE_SMALL_MODELS']}")
    print(f"   - LLM Model: {ci_env_vars['LLM_MODEL_SIZE']}")
    print(f"   - Log Level: {ci_env_vars['LOG_LEVEL']}")

    return ci_env_file


def main():
    """Main entry point."""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("CI Environment Configuration Script")
        print("Usage: python scripts/ci_env_config.py")
        print("")
        print("This script creates a .env.ci file with optimized settings for CI testing.")
        print("The configuration includes:")
        print("  - Lighter ML models (tiny/small)")
        print("  - Faster health checks")
        print("  - Reduced logging verbosity")
        print("  - Memory optimizations")
        return 0

    try:
        setup_ci_environment()
        return 0
    except Exception as e:
        print(f"❌ Error setting up CI environment: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
